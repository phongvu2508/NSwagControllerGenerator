//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.2.4.0 (NJsonSchema v9.13.36.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace VelocityEhs.UI.Web.Ehs.Application.Contracts
{
    #pragma warning disable

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.4.0 (NJsonSchema v9.13.36.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IEhsApiClient
    {
        /// <summary>The based url for API client</summary>
        string BaseUrl { get; }
        
        /// <summary>The injected HttpClient</summary>
        System.Net.Http.HttpClient HttpClient { get; }
    
        /// <summary>Return all accounts in the instance.</summary>
        /// <param name="accountId">The account id</param>
        /// <param name="externalId">The external account id</param>
        /// <param name="companyDomain">The company domain</param>
        /// <returns>The matching account</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Account>>> GetAccountsAsync(int? accountId, System.Guid? externalId, string companyDomain);
    
        /// <summary>Return all accounts in the instance.</summary>
        /// <param name="accountId">The account id</param>
        /// <param name="externalId">The external account id</param>
        /// <param name="companyDomain">The company domain</param>
        /// <returns>The matching account</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Account>>> GetAccountsAsync(int? accountId, System.Guid? externalId, string companyDomain, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update an existing account</summary>
        /// <param name="body">The updated account object</param>
        /// <returns>The account was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateAccountAsync(Account body);
    
        /// <summary>Update an existing account</summary>
        /// <param name="body">The updated account object</param>
        /// <returns>The account was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task UpdateAccountAsync(Account body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create a new account</summary>
        /// <param name="body">The new account schema</param>
        /// <returns>The new account identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreateAccountAsync(Account body);
    
        /// <summary>Create a new account</summary>
        /// <param name="body">The new account schema</param>
        /// <returns>The new account identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreateAccountAsync(Account body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the basic user information for an accounts user.</summary>
        /// <returns>The basic details of the user that matches the request</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<AccountUser>> GetUserInfoAsync();
    
        /// <summary>Gets the basic user information for an accounts user.</summary>
        /// <returns>The basic details of the user that matches the request</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<AccountUser>> GetUserInfoAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Request the user be sent their basic user info.</summary>
        /// <param name="contactInfo">Phone number of the person</param>
        /// <returns>Any matching user will be sent their basic user info.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RequestUserInfoAsync(string contactInfo);
    
        /// <summary>Request the user be sent their basic user info.</summary>
        /// <param name="contactInfo">Phone number of the person</param>
        /// <returns>Any matching user will be sent their basic user info.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task RequestUserInfoAsync(string contactInfo, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get an account by the account id</summary>
        /// <returns>The account</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Account>> GetAccountByIdAsync();
    
        /// <summary>Get an account by the account id</summary>
        /// <returns>The account</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Account>> GetAccountByIdAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the super admin for an account.</summary>
        /// <returns>The super admin of the account that matches the request</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Person>> GetAccountSuperAdminAsync();
    
        /// <summary>Gets the super admin for an account.</summary>
        /// <returns>The super admin of the account that matches the request</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Person>> GetAccountSuperAdminAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the super admin for an account.</summary>
        /// <returns>The new admin identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreateAccountSuperAdminAsync(Person body);
    
        /// <summary>Gets the super admin for an account.</summary>
        /// <returns>The new admin identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreateAccountSuperAdminAsync(Person body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the personalization information for an account.</summary>
        /// <returns>The personalization of the account that matches the request</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Personalization>> GetAccountPersonalizationAsync();
    
        /// <summary>Gets the personalization information for an account.</summary>
        /// <returns>The personalization of the account that matches the request</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Personalization>> GetAccountPersonalizationAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Updates a personalization based on account id</summary>
        /// <returns>The account was successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateAccountPersonalizationAsync(UpdatePersonalization body);
    
        /// <summary>Updates a personalization based on account id</summary>
        /// <returns>The account was successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task UpdateAccountPersonalizationAsync(UpdatePersonalization body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get an account currency list</summary>
        /// <returns>The currency list of the account that matches the request</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Currency>>> GetAccountCurrencyListAsync();
    
        /// <summary>Get an account currency list</summary>
        /// <returns>The currency list of the account that matches the request</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Currency>>> GetAccountCurrencyListAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update an account currency list</summary>
        /// <param name="body">The updated account currency list</param>
        /// <returns>The account was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateAccountCurrencyListAsync(UpdateAccountCurrencyList body);
    
        /// <summary>Update an account currency list</summary>
        /// <param name="body">The updated account currency list</param>
        /// <returns>The account was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task UpdateAccountCurrencyListAsync(UpdateAccountCurrencyList body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get an account country list</summary>
        /// <returns>The country list of the account that matches the request</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Country>>> GetAccountCountryListAsync();
    
        /// <summary>Get an account country list</summary>
        /// <returns>The country list of the account that matches the request</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Country>>> GetAccountCountryListAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update an account country list</summary>
        /// <param name="body">The updated account country list</param>
        /// <returns>The account was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateAccountCountryListAsync(UpdateAccountCountryList body);
    
        /// <summary>Update an account country list</summary>
        /// <param name="body">The updated account country list</param>
        /// <returns>The account was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task UpdateAccountCountryListAsync(UpdateAccountCountryList body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get an account language list</summary>
        /// <returns>The country list of the account that matches the request</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Language>>> GetAccountLanguagesAsync();
    
        /// <summary>Get an account language list</summary>
        /// <returns>The country list of the account that matches the request</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Language>>> GetAccountLanguagesAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the authentication methods for the account.</summary>
        /// <param name="accountId">The account id</param>
        /// <param name="companyDomain">The company domain</param>
        /// <returns>The authentication methods for the account.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<AuthenticationMethod>>> GetAuthMethodsAsync(int? accountId, string companyDomain);
    
        /// <summary>Gets the authentication methods for the account.</summary>
        /// <param name="accountId">The account id</param>
        /// <param name="companyDomain">The company domain</param>
        /// <returns>The authentication methods for the account.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<AuthenticationMethod>>> GetAuthMethodsAsync(int? accountId, string companyDomain, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Sets an authentication methods for the account.</summary>
        /// <returns>The authentication methods was successfully set.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetAuthMethodAsync(AuthenticationMethod body);
    
        /// <summary>Sets an authentication methods for the account.</summary>
        /// <returns>The authentication methods was successfully set.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task SetAuthMethodAsync(AuthenticationMethod body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete an authentication methods for the account.</summary>
        /// <param name="id">The authentication method identifier</param>
        /// <returns>The authentication method was deleted.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAuthMethodAsync(int id);
    
        /// <summary>Delete an authentication methods for the account.</summary>
        /// <param name="id">The authentication method identifier</param>
        /// <returns>The authentication method was deleted.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeleteAuthMethodAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Determines if the provided credentials are valid.</summary>
        /// <returns>Credientials were valid.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<FormsAuthVerificationResult>> AuthFormsHasAccessAsync(FormsAuthCrediential body);
    
        /// <summary>Determines if the provided credentials are valid.</summary>
        /// <returns>Credientials were valid.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<FormsAuthVerificationResult>> AuthFormsHasAccessAsync(FormsAuthCrediential body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Request to start the forgot password process for a given username.</summary>
        /// <param name="accountId">The account id</param>
        /// <returns>The person was successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<FormsAuthPasswordChangeResponse>> ForgotPasswordAsync(int accountId, FormsAuthPasswordChangeRequest body);
    
        /// <summary>Request to start the forgot password process for a given username.</summary>
        /// <param name="accountId">The account id</param>
        /// <returns>The person was successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<FormsAuthPasswordChangeResponse>> ForgotPasswordAsync(int accountId, FormsAuthPasswordChangeRequest body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Validates Password based on account, person and password rules</summary>
        /// <param name="accountId">The account id</param>
        /// <returns>Password validation result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<PasswordValidationResult>> ValidatePasswordAsync(int accountId, FormsAuthPasswordUpdate body);
    
        /// <summary>Validates Password based on account, person and password rules</summary>
        /// <param name="accountId">The account id</param>
        /// <returns>Password validation result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<PasswordValidationResult>> ValidatePasswordAsync(int accountId, FormsAuthPasswordUpdate body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update the password for a user</summary>
        /// <param name="accountId">The account id</param>
        /// <returns>The person's password was successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetPersonsPasswordAsync(int accountId, FormsAuthPasswordUpdate body);
    
        /// <summary>Update the password for a user</summary>
        /// <param name="accountId">The account id</param>
        /// <returns>The person's password was successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task ResetPersonsPasswordAsync(int accountId, FormsAuthPasswordUpdate body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the forms authentication state for a user</summary>
        /// <param name="accountId">The account id</param>
        /// <param name="personId">The person identifier</param>
        /// <returns>The person's forms auth state.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<FormsAuthState>> GetFormsAuthStateAsync(int accountId, int personId);
    
        /// <summary>Get the forms authentication state for a user</summary>
        /// <param name="accountId">The account id</param>
        /// <param name="personId">The person identifier</param>
        /// <returns>The person's forms auth state.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<FormsAuthState>> GetFormsAuthStateAsync(int accountId, int personId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Adds jti to a black list.</summary>
        /// <returns>The blacklist item was successfully added.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BlacklistAsync(FormsAuthBlacklistRequest body);
    
        /// <summary>Adds jti to a black list.</summary>
        /// <returns>The blacklist item was successfully added.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task BlacklistAsync(FormsAuthBlacklistRequest body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Checks the jti to see if it is blacklisted</summary>
        /// <param name="id">The SSO Identity Provider id</param>
        /// <returns>The BlackList Return Object</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<FormsAuthBlacklistResponse>> GetJTIFromBlacklistAsync(System.Guid id);
    
        /// <summary>Checks the jti to see if it is blacklisted</summary>
        /// <param name="id">The SSO Identity Provider id</param>
        /// <returns>The BlackList Return Object</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<FormsAuthBlacklistResponse>> GetJTIFromBlacklistAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the password rules for the account.</summary>
        /// <param name="accountId">The account id</param>
        /// <returns>The password rules for the account.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<FormsAuthPasswordRule>>> GetPasswordRulesAsync(int accountId);
    
        /// <summary>Gets the password rules for the account.</summary>
        /// <param name="accountId">The account id</param>
        /// <returns>The password rules for the account.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<FormsAuthPasswordRule>>> GetPasswordRulesAsync(int accountId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Adds password rules for the account.</summary>
        /// <returns>The authentication rules were added.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddPasswordRulesAsync(System.Collections.Generic.IEnumerable<FormsAuthPasswordRule> body);
    
        /// <summary>Adds password rules for the account.</summary>
        /// <returns>The authentication rules were added.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task AddPasswordRulesAsync(System.Collections.Generic.IEnumerable<FormsAuthPasswordRule> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deletes a password rule for the account.</summary>
        /// <param name="id">The password rule identifier</param>
        /// <returns>The password rule was removed for the account.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePasswordRuleAsync(int id);
    
        /// <summary>Deletes a password rule for the account.</summary>
        /// <param name="id">The password rule identifier</param>
        /// <returns>The password rule was removed for the account.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeletePasswordRuleAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the forms authentication key for a user to assist in their authentication.</summary>
        /// <param name="accountId">The account id</param>
        /// <param name="personId">The person identifier</param>
        /// <returns>The person's forms auth state.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<FormsAuthKey>> GetFormsAuthKeyAsync(int accountId, int personId);
    
        /// <summary>Get the forms authentication key for a user to assist in their authentication.</summary>
        /// <param name="accountId">The account id</param>
        /// <param name="personId">The person identifier</param>
        /// <returns>The person's forms auth state.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<FormsAuthKey>> GetFormsAuthKeyAsync(int accountId, int personId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Determine if a forms auth key is valid.</summary>
        /// <returns>The provided key was valid.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ValidateFormsAuthKeyAsync(FormsAuthKey body);
    
        /// <summary>Determine if a forms auth key is valid.</summary>
        /// <returns>The provided key was valid.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task ValidateFormsAuthKeyAsync(FormsAuthKey body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Valid the login from an sso provider.</summary>
        /// <returns>Credientials were valid.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<SsoAuthVerificationResult>> AuthSsoHasAccessAsync(SsoAuthCrediential body);
    
        /// <summary>Valid the login from an sso provider.</summary>
        /// <returns>Credientials were valid.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<SsoAuthVerificationResult>> AuthSsoHasAccessAsync(SsoAuthCrediential body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a list of SSO Identity Providers</summary>
        /// <param name="trustName">The trust name of the identity providers to get.</param>
        /// <returns>The SSO Identity Providers</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<SsoIdentityProvider>>> GetSsoIdpAsync(string trustName);
    
        /// <summary>Get a list of SSO Identity Providers</summary>
        /// <param name="trustName">The trust name of the identity providers to get.</param>
        /// <returns>The SSO Identity Providers</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<SsoIdentityProvider>>> GetSsoIdpAsync(string trustName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update an existing SSO Identity Provider.</summary>
        /// <param name="body">The updated SSO Identity Provider object</param>
        /// <returns>The SSO Identity Provider was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateSsoIdpAsync(SsoIdentityProvider body);
    
        /// <summary>Update an existing SSO Identity Provider.</summary>
        /// <param name="body">The updated SSO Identity Provider object</param>
        /// <returns>The SSO Identity Provider was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task UpdateSsoIdpAsync(SsoIdentityProvider body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create a new SSO Identity Provider</summary>
        /// <param name="body">The new SSO Identity Provider schema</param>
        /// <returns>The new SSO Identity Provider identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreateSsoIdpAsync(SsoIdentityProvider body);
    
        /// <summary>Create a new SSO Identity Provider</summary>
        /// <param name="body">The new SSO Identity Provider schema</param>
        /// <returns>The new SSO Identity Provider identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreateSsoIdpAsync(SsoIdentityProvider body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a SSO Identity Provider by the id</summary>
        /// <param name="id">The SSO Identity Provider id</param>
        /// <returns>The SSO Identity Provider</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<SsoIdentityProvider>> GetSsoIdpByIdAsync(int id);
    
        /// <summary>Get a SSO Identity Provider by the id</summary>
        /// <param name="id">The SSO Identity Provider id</param>
        /// <returns>The SSO Identity Provider</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<SsoIdentityProvider>> GetSsoIdpByIdAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a list of SSO Service Providers</summary>
        /// <param name="velocityServiceProvidersOnly">Whether to only include VelocityEHS service providers.</param>
        /// <returns>The list of SSO Service Providers</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<SsoServiceProvider>>> GetSsoSpAsync(bool? velocityServiceProvidersOnly);
    
        /// <summary>Get a list of SSO Service Providers</summary>
        /// <param name="velocityServiceProvidersOnly">Whether to only include VelocityEHS service providers.</param>
        /// <returns>The list of SSO Service Providers</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<SsoServiceProvider>>> GetSsoSpAsync(bool? velocityServiceProvidersOnly, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update existing SSO Service Provider</summary>
        /// <param name="body">The updated SSO Service Provider object</param>
        /// <returns>The hierarchy was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateSsoSpAsync(SsoServiceProvider body);
    
        /// <summary>Update existing SSO Service Provider</summary>
        /// <param name="body">The updated SSO Service Provider object</param>
        /// <returns>The hierarchy was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task UpdateSsoSpAsync(SsoServiceProvider body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create a new SSO Identity Provider</summary>
        /// <param name="body">The new SSO Service Provider schema</param>
        /// <returns>The new hierarchy identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreateSsoSpAsync(SsoServiceProvider body);
    
        /// <summary>Create a new SSO Identity Provider</summary>
        /// <param name="body">The new SSO Service Provider schema</param>
        /// <returns>The new hierarchy identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreateSsoSpAsync(SsoServiceProvider body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a SSO Service Provider by the id</summary>
        /// <param name="id">The SSO Service Provider id</param>
        /// <returns>The SSO Service Provider</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<SsoServiceProvider>> GetSsoSpByIdAsync(int id);
    
        /// <summary>Get a SSO Service Provider by the id</summary>
        /// <param name="id">The SSO Service Provider id</param>
        /// <returns>The SSO Service Provider</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<SsoServiceProvider>> GetSsoSpByIdAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Requests a code for multi-factor authentication.</summary>
        /// <param name="deliveryMethod">The method in which to deliver the forgot password information.</param>
        /// <returns>Verification code successfully requested.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<IdentityVerification>> RequestAuthVerificationCodeAsync(DeliveryMethod? deliveryMethod);
    
        /// <summary>Requests a code for multi-factor authentication.</summary>
        /// <param name="deliveryMethod">The method in which to deliver the forgot password information.</param>
        /// <returns>Verification code successfully requested.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<IdentityVerification>> RequestAuthVerificationCodeAsync(DeliveryMethod? deliveryMethod, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Verifies a code for multi-factor authentication.</summary>
        /// <param name="body">The identity verification information</param>
        /// <returns>Verification code successfully validated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task VerifyAuthVerificationCodeAsync(IdentityVerification body);
    
        /// <summary>Verifies a code for multi-factor authentication.</summary>
        /// <param name="body">The identity verification information</param>
        /// <returns>Verification code successfully validated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task VerifyAuthVerificationCodeAsync(IdentityVerification body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the form configuration for a state.</summary>
        /// <param name="category">The name of the category to get the form configuration for.</param>
        /// <param name="state">The name of the state to get the form configuration for.</param>
        /// <returns>The state's form configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetStateFormConfigByNameAsync(string category, string state);
    
        /// <summary>Get the form configuration for a state.</summary>
        /// <param name="category">The name of the category to get the form configuration for.</param>
        /// <param name="state">The name of the state to get the form configuration for.</param>
        /// <returns>The state's form configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetStateFormConfigByNameAsync(string category, string state, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the form configuration for a state.</summary>
        /// <param name="categoryId">The id of the category to get the form configuration for.</param>
        /// <param name="productStateId">The id of the product state to get the form configuration for.</param>
        /// <returns>The state's form configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetStateFormConfigAsync(int categoryId, int productStateId);
    
        /// <summary>Get the form configuration for a state.</summary>
        /// <param name="categoryId">The id of the category to get the form configuration for.</param>
        /// <param name="productStateId">The id of the product state to get the form configuration for.</param>
        /// <returns>The state's form configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetStateFormConfigAsync(int categoryId, int productStateId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the product configuration summary</summary>
        /// <returns>The product configuration summary</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetProductConfigSummaryAsync();
    
        /// <summary>Get the product configuration summary</summary>
        /// <returns>The product configuration summary</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetProductConfigSummaryAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a view configuration</summary>
        /// <param name="name">The name of the view to get the configuration for.</param>
        /// <returns>The view configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetViewConfigByNameAsync(string name);
    
        /// <summary>Get a view configuration</summary>
        /// <param name="name">The name of the view to get the configuration for.</param>
        /// <returns>The view configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetViewConfigByNameAsync(string name, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a view configuration</summary>
        /// <param name="viewId">The id of the view to get the configuration for.</param>
        /// <returns>The view configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetViewConfigByIdAsync(int viewId);
    
        /// <summary>Get a view configuration</summary>
        /// <param name="viewId">The id of the view to get the configuration for.</param>
        /// <returns>The view configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetViewConfigByIdAsync(int viewId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the workflow configuration for a state</summary>
        /// <param name="category">The name of the category to get the workflow configuration for.</param>
        /// <param name="state">The name of the state to get the workflow configuration for.</param>
        /// <returns>The state's workflow configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetStateWorkflowConfigByNameAsync(string category, string state);
    
        /// <summary>Get the workflow configuration for a state</summary>
        /// <param name="category">The name of the category to get the workflow configuration for.</param>
        /// <param name="state">The name of the state to get the workflow configuration for.</param>
        /// <returns>The state's workflow configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetStateWorkflowConfigByNameAsync(string category, string state, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the workflow configuration for a state</summary>
        /// <param name="categoryId">The id of the category to get the workflow configuration for.</param>
        /// <param name="productStateId">The id of the product state to get the workflow configuration for.</param>
        /// <returns>The state's workflow configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetStateWorkflowConfigRawAsync(int categoryId, int productStateId);
    
        /// <summary>Get the workflow configuration for a state</summary>
        /// <param name="categoryId">The id of the category to get the workflow configuration for.</param>
        /// <param name="productStateId">The id of the product state to get the workflow configuration for.</param>
        /// <returns>The state's workflow configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetStateWorkflowConfigRawAsync(int categoryId, int productStateId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the workflow configurations summaries</summary>
        /// <param name="productId">The id of the product to get the workflow config summary for.</param>
        /// <param name="lastModified">Only include configurations that have changed since this date.</param>
        /// <returns>The state's workflow configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetWorkflowConfigsSummaryAsync(int? productId, System.DateTimeOffset? lastModified);
    
        /// <summary>Get the workflow configurations summaries</summary>
        /// <param name="productId">The id of the product to get the workflow config summary for.</param>
        /// <param name="lastModified">Only include configurations that have changed since this date.</param>
        /// <returns>The state's workflow configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetWorkflowConfigsSummaryAsync(int? productId, System.DateTimeOffset? lastModified, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the list of contracting companies that match the parameters.</summary>
        /// <param name="contractorName">The text the contractor's name should include</param>
        /// <param name="contractorType">The list of contractor types to include</param>
        /// <param name="status">The status of contractors to include</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <returns>A list of Contracting Companies</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<ContractingCompaniesResponse>> GetContractingCompaniesAsync(string contractorName, System.Collections.Generic.IEnumerable<int> contractorType, int? status, int? pageNumber, int? pageSize);
    
        /// <summary>Get the list of contracting companies that match the parameters.</summary>
        /// <param name="contractorName">The text the contractor's name should include</param>
        /// <param name="contractorType">The list of contractor types to include</param>
        /// <param name="status">The status of contractors to include</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <returns>A list of Contracting Companies</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<ContractingCompaniesResponse>> GetContractingCompaniesAsync(string contractorName, System.Collections.Generic.IEnumerable<int> contractorType, int? status, int? pageNumber, int? pageSize, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update a contracting company.</summary>
        /// <returns>The Contracting Company was successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateContractingCompanyAsync(UpdateContractingCompanyParams body);
    
        /// <summary>Update a contracting company.</summary>
        /// <returns>The Contracting Company was successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task UpdateContractingCompanyAsync(UpdateContractingCompanyParams body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create a new contracting company.</summary>
        /// <returns>The new contracting conpanies identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Status201Response>>> CreateContractingCompanyAsync(ContractingCompany body);
    
        /// <summary>Create a new contracting company.</summary>
        /// <returns>The new contracting conpanies identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Status201Response>>> CreateContractingCompanyAsync(ContractingCompany body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete a contracting company.</summary>
        /// <param name="id">The identifier of the contracting company to delete.</param>
        /// <returns>The contracting company was succesfully deleted.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteContractingCompanyAsync(int id);
    
        /// <summary>Delete a contracting company.</summary>
        /// <param name="id">The identifier of the contracting company to delete.</param>
        /// <returns>The contracting company was succesfully deleted.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeleteContractingCompanyAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a contracting company.</summary>
        /// <param name="id">The identifier of the contracting company to get.</param>
        /// <returns>The matching contracting company.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<ContractingCompany>> GetContractingCompanyAsync(int id);
    
        /// <summary>Get a contracting company.</summary>
        /// <param name="id">The identifier of the contracting company to get.</param>
        /// <returns>The matching contracting company.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<ContractingCompany>> GetContractingCompanyAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Return a list all Hierarchies</summary>
        /// <returns>A list of Hierarchies</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Hierarchy>>> GetHierarchiesAsync();
    
        /// <summary>Return a list all Hierarchies</summary>
        /// <returns>A list of Hierarchies</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Hierarchy>>> GetHierarchiesAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update existing Hierarchy</summary>
        /// <param name="body">The updated Hierarchy object</param>
        /// <returns>The hierarchy was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateHierarchyAsync(UpdateHierarchyParams body);
    
        /// <summary>Update existing Hierarchy</summary>
        /// <param name="body">The updated Hierarchy object</param>
        /// <returns>The hierarchy was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task UpdateHierarchyAsync(UpdateHierarchyParams body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create new Hierarchy</summary>
        /// <param name="body">The new Hierarchy schema</param>
        /// <returns>The new hierarchy identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreateHierarchyAsync(NewHierarchyParams body);
    
        /// <summary>Create new Hierarchy</summary>
        /// <param name="body">The new Hierarchy schema</param>
        /// <returns>The new hierarchy identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreateHierarchyAsync(NewHierarchyParams body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a Hierarchy by id</summary>
        /// <param name="hierarchyId">The Hierarchy identifier</param>
        /// <returns>A Hierarchy by id</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Hierarchy>> GetHierarchyAsync(int? hierarchyId);
    
        /// <summary>Get a Hierarchy by id</summary>
        /// <param name="hierarchyId">The Hierarchy identifier</param>
        /// <returns>A Hierarchy by id</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Hierarchy>> GetHierarchyAsync(int? hierarchyId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete a Hierarchy by Hierarchy id</summary>
        /// <param name="hierarchyId">The Hierarchy identifier</param>
        /// <returns>Delete Hierarchy result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteHierarchyAsync(int? hierarchyId);
    
        /// <summary>Delete a Hierarchy by Hierarchy id</summary>
        /// <param name="hierarchyId">The Hierarchy identifier</param>
        /// <returns>Delete Hierarchy result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeleteHierarchyAsync(int? hierarchyId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Hierarchy creation validation</summary>
        /// <param name="body">The new Hierarchy object</param>
        /// <returns>Create Hierarchy validation result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<bool>> CanCreateHierarchyAsync(NewHierarchyParams body);
    
        /// <summary>Hierarchy creation validation</summary>
        /// <param name="body">The new Hierarchy object</param>
        /// <returns>Create Hierarchy validation result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<bool>> CanCreateHierarchyAsync(NewHierarchyParams body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Hierarchy update validation</summary>
        /// <param name="body">The updated Hierarchy object</param>
        /// <returns>Update Hierarchy validation result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<bool>> CanUpdateHierarchyAsync(UpdateHierarchyParams body);
    
        /// <summary>Hierarchy update validation</summary>
        /// <param name="body">The updated Hierarchy object</param>
        /// <returns>Update Hierarchy validation result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<bool>> CanUpdateHierarchyAsync(UpdateHierarchyParams body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Hierarchy deletion validation</summary>
        /// <param name="hierarchyId">The hierarchy identifier</param>
        /// <returns>Delete Hierarchy validation result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<bool>> CanDeleteHierarchyAsync(int? hierarchyId);
    
        /// <summary>Hierarchy deletion validation</summary>
        /// <param name="hierarchyId">The hierarchy identifier</param>
        /// <returns>Delete Hierarchy validation result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<bool>> CanDeleteHierarchyAsync(int? hierarchyId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Add translations into Database received from The Translation Tool</summary>
        /// <returns>The translation requests were successfully created. The reason why reponse 204 returned instead of 201 because we are not returning any Id for this API.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetTranslationsAsync(System.Collections.Generic.IEnumerable<SetTranslation> body);
    
        /// <summary>Add translations into Database received from The Translation Tool</summary>
        /// <returns>The translation requests were successfully created. The reason why reponse 204 returned instead of 201 because we are not returning any Id for this API.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task SetTranslationsAsync(System.Collections.Generic.IEnumerable<SetTranslation> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Translation Requests by params</summary>
        /// <param name="fromDate">Start date of range for getTranslationRequests</param>
        /// <param name="toDate">End date of range for getTranslationRequests</param>
        /// <returns>A list of translation requests founded using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<TranslationRequest>>> GetTranslationRequestsAsync(System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate);
    
        /// <summary>Get Translation Requests by params</summary>
        /// <param name="fromDate">Start date of range for getTranslationRequests</param>
        /// <param name="toDate">End date of range for getTranslationRequests</param>
        /// <returns>A list of translation requests founded using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<TranslationRequest>>> GetTranslationRequestsAsync(System.DateTimeOffset? fromDate, System.DateTimeOffset? toDate, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Updates a sent based on translation requests</summary>
        /// <returns>The translation requests were successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateSentTranslationRequestsAsync(UpdateSentTranslationRequests body);
    
        /// <summary>Updates a sent based on translation requests</summary>
        /// <returns>The translation requests were successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task UpdateSentTranslationRequestsAsync(UpdateSentTranslationRequests body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create machine translation request</summary>
        /// <param name="body">The new translation schema</param>
        /// <returns>The new translation identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreateMachineTranslationRequestAsync(MachineTranslation body);
    
        /// <summary>Create machine translation request</summary>
        /// <param name="body">The new translation schema</param>
        /// <returns>The new translation identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreateMachineTranslationRequestAsync(MachineTranslation body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get UnitSystem Conversion Rate</summary>
        /// <param name="fromUnitId">Original Id of Unit</param>
        /// <param name="fromUnitValue">Original Value of Unit</param>
        /// <param name="toUnitSystemId">Converted Id of Unit System</param>
        /// <returns>A Conversion value founded using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<UnitSystem>> GetUnitSystemConversionAsync(int? fromUnitId, double? fromUnitValue, int? toUnitSystemId);
    
        /// <summary>Get UnitSystem Conversion Rate</summary>
        /// <param name="fromUnitId">Original Id of Unit</param>
        /// <param name="fromUnitValue">Original Value of Unit</param>
        /// <param name="toUnitSystemId">Converted Id of Unit System</param>
        /// <returns>A Conversion value founded using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<UnitSystem>> GetUnitSystemConversionAsync(int? fromUnitId, double? fromUnitValue, int? toUnitSystemId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Currency Conversion Rate</summary>
        /// <param name="fromCurrencyId">Id of original currency</param>
        /// <param name="toCurrencyId">Id of converting currency</param>
        /// <param name="year">Year of the conversion</param>
        /// <returns>A conversion rate founded using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Currency>> GetCurrencyConversionRateAsync(int? fromCurrencyId, int? toCurrencyId, int? year);
    
        /// <summary>Get Currency Conversion Rate</summary>
        /// <param name="fromCurrencyId">Id of original currency</param>
        /// <param name="toCurrencyId">Id of converting currency</param>
        /// <param name="year">Year of the conversion</param>
        /// <returns>A conversion rate founded using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Currency>> GetCurrencyConversionRateAsync(int? fromCurrencyId, int? toCurrencyId, int? year, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Currency list by searching</summary>
        /// <returns>A currency list founded using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Currency>>> GetCurrencyForSearchAsync(string searchText);
    
        /// <summary>Get Currency list by searching</summary>
        /// <returns>A currency list founded using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Currency>>> GetCurrencyForSearchAsync(string searchText, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Timezone list</summary>
        /// <returns>A timezone list founded</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<TimeZoneList>>> GetTimeZonesAsync();
    
        /// <summary>Get Timezone list</summary>
        /// <returns>A timezone list founded</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<TimeZoneList>>> GetTimeZonesAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Search for locations by params</summary>
        /// <param name="id">The location identifier</param>
        /// <param name="locationType">The location type</param>
        /// <param name="hierarchyId">The hierarchy identifier</param>
        /// <param name="locationStatuses">The array of selected statuses</param>
        /// <param name="limit">The amount of locations return per request</param>
        /// <param name="offset">The position for first location to be returned in the collection</param>
        /// <returns>A list of locations founded using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Location>>> GetLocationsAsync(int? id, LocationType? locationType, int? hierarchyId, System.Collections.Generic.IEnumerable<LocationStatus> locationStatuses, int? limit, int? offset);
    
        /// <summary>Search for locations by params</summary>
        /// <param name="id">The location identifier</param>
        /// <param name="locationType">The location type</param>
        /// <param name="hierarchyId">The hierarchy identifier</param>
        /// <param name="locationStatuses">The array of selected statuses</param>
        /// <param name="limit">The amount of locations return per request</param>
        /// <param name="offset">The position for first location to be returned in the collection</param>
        /// <returns>A list of locations founded using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Location>>> GetLocationsAsync(int? id, LocationType? locationType, int? hierarchyId, System.Collections.Generic.IEnumerable<LocationStatus> locationStatuses, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update existing location</summary>
        /// <param name="body">The updated location schema</param>
        /// <returns>The location was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateLocationAsync(Location body);
    
        /// <summary>Update existing location</summary>
        /// <param name="body">The updated location schema</param>
        /// <returns>The location was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task UpdateLocationAsync(Location body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create new location</summary>
        /// <param name="body">The new location schema</param>
        /// <returns>The new location identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreateLocationAsync(NewLocationParams body);
    
        /// <summary>Create new location</summary>
        /// <param name="body">The new location schema</param>
        /// <returns>The new location identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreateLocationAsync(NewLocationParams body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete a location by location id</summary>
        /// <param name="id">The location identifier</param>
        /// <param name="locationType">The location type</param>
        /// <returns>Location deletion result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteLocationAsync(int id, LocationType locationType);
    
        /// <summary>Delete a location by location id</summary>
        /// <param name="id">The location identifier</param>
        /// <param name="locationType">The location type</param>
        /// <returns>Location deletion result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeleteLocationAsync(int id, LocationType locationType, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a location by location id</summary>
        /// <param name="locationId">The location identifier</param>
        /// <param name="locationType">The location type</param>
        /// <returns>A location with provided identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Location>> GetLocationByIdAsync(int locationId, LocationType locationType);
    
        /// <summary>Get a location by location id</summary>
        /// <param name="locationId">The location identifier</param>
        /// <param name="locationType">The location type</param>
        /// <returns>A location with provided identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Location>> GetLocationByIdAsync(int locationId, LocationType locationType, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get locations by location name</summary>
        /// <param name="locationName">The location name</param>
        /// <param name="hierarchyId">The hierarchy identifier</param>
        /// <param name="locationTypes">The array of selected location types</param>
        /// <param name="locationStatuses">The array of selected statuses</param>
        /// <returns>A list of locations founded using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Location>>> GetLocationsByNameAsync(string locationName, int? hierarchyId, System.Collections.Generic.IEnumerable<LocationType> locationTypes, System.Collections.Generic.IEnumerable<LocationStatus> locationStatuses);
    
        /// <summary>Get locations by location name</summary>
        /// <param name="locationName">The location name</param>
        /// <param name="hierarchyId">The hierarchy identifier</param>
        /// <param name="locationTypes">The array of selected location types</param>
        /// <param name="locationStatuses">The array of selected statuses</param>
        /// <returns>A list of locations founded using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Location>>> GetLocationsByNameAsync(string locationName, int? hierarchyId, System.Collections.Generic.IEnumerable<LocationType> locationTypes, System.Collections.Generic.IEnumerable<LocationStatus> locationStatuses, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get locations by traverse the location tree</summary>
        /// <param name="id">The location identifier</param>
        /// <param name="locationType">The location type</param>
        /// <param name="hierarchyId">The hierarchy identifier</param>
        /// <param name="locationStatuses">The array of selected statuses</param>
        /// <param name="levels">The number of level to traverse within hierarchy</param>
        /// <returns>A list of locations founded using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Location>>> GetTraversedLocationsAsync(int id, LocationType locationType, int hierarchyId, System.Collections.Generic.IEnumerable<LocationStatus> locationStatuses, int? levels);
    
        /// <summary>Get locations by traverse the location tree</summary>
        /// <param name="id">The location identifier</param>
        /// <param name="locationType">The location type</param>
        /// <param name="hierarchyId">The hierarchy identifier</param>
        /// <param name="locationStatuses">The array of selected statuses</param>
        /// <param name="levels">The number of level to traverse within hierarchy</param>
        /// <returns>A list of locations founded using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Location>>> GetTraversedLocationsAsync(int id, LocationType locationType, int hierarchyId, System.Collections.Generic.IEnumerable<LocationStatus> locationStatuses, int? levels, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get immediate child locations or location groups</summary>
        /// <param name="id">The location identifier</param>
        /// <param name="locationTypes">The array of selected types</param>
        /// <param name="locationStatuses">The array of selected statuses</param>
        /// <returns>A list of locations founded using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Location>>> GetChildLocationsAsync(int id, System.Collections.Generic.IEnumerable<LocationType> locationTypes, System.Collections.Generic.IEnumerable<LocationStatus> locationStatuses);
    
        /// <summary>Get immediate child locations or location groups</summary>
        /// <param name="id">The location identifier</param>
        /// <param name="locationTypes">The array of selected types</param>
        /// <param name="locationStatuses">The array of selected statuses</param>
        /// <returns>A list of locations founded using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Location>>> GetChildLocationsAsync(int id, System.Collections.Generic.IEnumerable<LocationType> locationTypes, System.Collections.Generic.IEnumerable<LocationStatus> locationStatuses, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get child locations count</summary>
        /// <param name="id">The location identifier</param>
        /// <param name="locationStatuses">The array of selected statuses</param>
        /// <param name="levels">The number of level to traverse within hierarchy</param>
        /// <returns>A count of locations found using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<int>> GetChildLocationsCountAsync(int id, System.Collections.Generic.IEnumerable<LocationStatus> locationStatuses, int? levels);
    
        /// <summary>Get child locations count</summary>
        /// <param name="id">The location identifier</param>
        /// <param name="locationStatuses">The array of selected statuses</param>
        /// <param name="levels">The number of level to traverse within hierarchy</param>
        /// <returns>A count of locations found using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<int>> GetChildLocationsCountAsync(int id, System.Collections.Generic.IEnumerable<LocationStatus> locationStatuses, int? levels, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get child location groups count</summary>
        /// <param name="id">The location identifier</param>
        /// <param name="locationStatuses">The array of selected statuses</param>
        /// <param name="levels">The number of level to traverse within hierarchy</param>
        /// <returns>A count of locations found using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<int>> GetChildLocationGroupsCountAsync(int id, System.Collections.Generic.IEnumerable<LocationStatus> locationStatuses, int? levels);
    
        /// <summary>Get child location groups count</summary>
        /// <param name="id">The location identifier</param>
        /// <param name="locationStatuses">The array of selected statuses</param>
        /// <param name="levels">The number of level to traverse within hierarchy</param>
        /// <returns>A count of locations found using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<int>> GetChildLocationGroupsCountAsync(int id, System.Collections.Generic.IEnumerable<LocationStatus> locationStatuses, int? levels, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Move location and all children under another location group</summary>
        /// <returns>The location successfully moved.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveLocationAsync(MovingLocationParams body);
    
        /// <summary>Move location and all children under another location group</summary>
        /// <returns>The location successfully moved.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task MoveLocationAsync(MovingLocationParams body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Validation of location creation</summary>
        /// <param name="body">The new location object</param>
        /// <returns>Create location validation result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<bool>> CanCreateLocationAsync(NewLocationParams body);
    
        /// <summary>Validation of location creation</summary>
        /// <param name="body">The new location object</param>
        /// <returns>Create location validation result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<bool>> CanCreateLocationAsync(NewLocationParams body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Validation of location deleting</summary>
        /// <param name="id">The location identifier</param>
        /// <param name="locationType">The location type</param>
        /// <returns>Delete location validation result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<bool>> CanDeleteLocationAsync(int id, LocationType locationType);
    
        /// <summary>Validation of location deleting</summary>
        /// <param name="id">The location identifier</param>
        /// <param name="locationType">The location type</param>
        /// <returns>Delete location validation result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<bool>> CanDeleteLocationAsync(int id, LocationType locationType, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Validate unique location name</summary>
        /// <param name="locationName">The location name</param>
        /// <returns>The location name is unique.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ValidateUniqueLocationAsync(string locationName);
    
        /// <summary>Validate unique location name</summary>
        /// <param name="locationName">The location name</param>
        /// <returns>The location name is unique.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task ValidateUniqueLocationAsync(string locationName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Validate unique location group name under a parent location group</summary>
        /// <param name="locationGroupId">The parent location group identifier</param>
        /// <param name="parentLocationGroupId">The parent location group identifier</param>
        /// <param name="locationGroupName">The location name</param>
        /// <returns>The location group name is unique.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ValidateUniqueLocationGroupAsync(int? locationGroupId, int? parentLocationGroupId, string locationGroupName);
    
        /// <summary>Validate unique location group name under a parent location group</summary>
        /// <param name="locationGroupId">The parent location group identifier</param>
        /// <param name="parentLocationGroupId">The parent location group identifier</param>
        /// <param name="locationGroupName">The location name</param>
        /// <returns>The location group name is unique.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task ValidateUniqueLocationGroupAsync(int? locationGroupId, int? parentLocationGroupId, string locationGroupName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Search for lists based on params</summary>
        /// <param name="statusFilters">The array of selected statuses to include</param>
        /// <param name="productFilters">The array of selected products to include</param>
        /// <returns>A list of lists found using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<List>>> GetListsAsync(System.Collections.Generic.IEnumerable<int> statusFilters, System.Collections.Generic.IEnumerable<int> productFilters);
    
        /// <summary>Search for lists based on params</summary>
        /// <param name="statusFilters">The array of selected statuses to include</param>
        /// <param name="productFilters">The array of selected products to include</param>
        /// <returns>A list of lists found using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<List>>> GetListsAsync(System.Collections.Generic.IEnumerable<int> statusFilters, System.Collections.Generic.IEnumerable<int> productFilters, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update existing list</summary>
        /// <param name="body">The updated list schema</param>
        /// <returns>The list was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateListAsync(UpdateListParams body);
    
        /// <summary>Update existing list</summary>
        /// <param name="body">The updated list schema</param>
        /// <returns>The list was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task UpdateListAsync(UpdateListParams body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create new list</summary>
        /// <param name="body">The list schema</param>
        /// <returns>The new list identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreateListAsync(List body);
    
        /// <summary>Create new list</summary>
        /// <param name="body">The list schema</param>
        /// <returns>The new list identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreateListAsync(List body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete a list by list id</summary>
        /// <param name="listId">The list identifier</param>
        /// <returns>List deletion result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteListAsync(int listId);
    
        /// <summary>Delete a list by list id</summary>
        /// <param name="listId">The list identifier</param>
        /// <returns>List deletion result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeleteListAsync(int listId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a list by list id</summary>
        /// <param name="listId">The list to be returned</param>
        /// <returns>A list with provided identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<List>> GetListByIdAsync(int listId);
    
        /// <summary>Get a list by list id</summary>
        /// <param name="listId">The list to be returned</param>
        /// <returns>A list with provided identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<List>> GetListByIdAsync(int listId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get lists by list name</summary>
        /// <param name="listName">The lists to be returned</param>
        /// <returns>A list of lists found using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<ListSearch>>> GetListsByNameAsync(string listName);
    
        /// <summary>Get lists by list name</summary>
        /// <param name="listName">The lists to be returned</param>
        /// <returns>A list of lists found using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<ListSearch>>> GetListsByNameAsync(string listName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Search for list items based on params</summary>
        /// <param name="listId">The list the list items retrieved belong to (null will return all lists)</param>
        /// <param name="listStatusFilters">The array of selected statuses of lists to include</param>
        /// <param name="listItemStatusFilters">The array of selected statuses list items to include</param>
        /// <returns>A list of list items found using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<ListItem>>> GetListItemsAsync(int? listId, System.Collections.Generic.IEnumerable<int> listStatusFilters, System.Collections.Generic.IEnumerable<int> listItemStatusFilters);
    
        /// <summary>Search for list items based on params</summary>
        /// <param name="listId">The list the list items retrieved belong to (null will return all lists)</param>
        /// <param name="listStatusFilters">The array of selected statuses of lists to include</param>
        /// <param name="listItemStatusFilters">The array of selected statuses list items to include</param>
        /// <returns>A list of list items found using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<ListItem>>> GetListItemsAsync(int? listId, System.Collections.Generic.IEnumerable<int> listStatusFilters, System.Collections.Generic.IEnumerable<int> listItemStatusFilters, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update existing list item</summary>
        /// <param name="body">The updated list item schema</param>
        /// <returns>The list item was successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateListItemAsync(UpdateListItemParams body);
    
        /// <summary>Update existing list item</summary>
        /// <param name="body">The updated list item schema</param>
        /// <returns>The list item was successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task UpdateListItemAsync(UpdateListItemParams body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create new list item</summary>
        /// <param name="body">The new list item schema</param>
        /// <returns>The new list item identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201MultipleResponses>> CreateListItemAsync(NewListItemParams body);
    
        /// <summary>Create new list item</summary>
        /// <param name="body">The new list item schema</param>
        /// <returns>The new list item identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201MultipleResponses>> CreateListItemAsync(NewListItemParams body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete a list item by list item id</summary>
        /// <param name="listItemId">The list item identifier</param>
        /// <returns>List Item deletion result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteListItemAsync(int listItemId);
    
        /// <summary>Delete a list item by list item id</summary>
        /// <param name="listItemId">The list item identifier</param>
        /// <returns>List Item deletion result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeleteListItemAsync(int listItemId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a list item by list item id</summary>
        /// <param name="listItemId">The list item to be returned</param>
        /// <returns>A list item with provided identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<ListItem>> GetListItemByIdAsync(int listItemId);
    
        /// <summary>Get a list item by list item id</summary>
        /// <param name="listItemId">The list item to be returned</param>
        /// <returns>A list item with provided identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<ListItem>> GetListItemByIdAsync(int listItemId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get list items by list item name</summary>
        /// <param name="listItemName">The list items to be returned</param>
        /// <returns>A list of list items found using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<ListItemSearch>>> GetListItemsByNameAsync(string listItemName);
    
        /// <summary>Get list items by list item name</summary>
        /// <param name="listItemName">The list items to be returned</param>
        /// <returns>A list of list items found using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<ListItemSearch>>> GetListItemsByNameAsync(string listItemName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Reorders all list items in a list</summary>
        /// <param name="body">The reorder list item schema</param>
        /// <returns>The list item reorder was successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ReorderListItemAsync(ReorderListItemParams body);
    
        /// <summary>Reorders all list items in a list</summary>
        /// <param name="body">The reorder list item schema</param>
        /// <returns>The list item reorder was successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task ReorderListItemAsync(ReorderListItemParams body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a list of available location Ids by location list identifier</summary>
        /// <param name="listId">The location list identifier</param>
        /// <returns>A List of available location identifier for this location list</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LocationListAvailability>> GetLocationListAvailabilityByIdAsync(int listId);
    
        /// <summary>Get a list of available location Ids by location list identifier</summary>
        /// <param name="listId">The location list identifier</param>
        /// <returns>A List of available location identifier for this location list</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LocationListAvailability>> GetLocationListAvailabilityByIdAsync(int listId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Set availability for a location list</summary>
        /// <param name="listId">The location list identifier</param>
        /// <param name="body">The updated availability for selected location list</param>
        /// <returns>The availability was successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetLocationListAvailabilityAsync(int listId, LocationListAvailabilityDetails body);
    
        /// <summary>Set availability for a location list</summary>
        /// <param name="listId">The location list identifier</param>
        /// <param name="body">The updated availability for selected location list</param>
        /// <returns>The availability was successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task SetLocationListAvailabilityAsync(int listId, LocationListAvailabilityDetails body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get availability location structure for a location list</summary>
        /// <param name="listId">The location list identifier</param>
        /// <param name="locationId">The location identifier</param>
        /// <param name="locationType">The location type</param>
        /// <param name="hierarchyId">The hierarchy identifier</param>
        /// <param name="levels">The number of level to traverse within hierarchy</param>
        /// <returns>A list of locations with statuses founded using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Location>>> GetLocationListAvailabilityStructureAsync(int listId, int locationId, LocationType locationType, int hierarchyId, int? levels);
    
        /// <summary>Get availability location structure for a location list</summary>
        /// <param name="listId">The location list identifier</param>
        /// <param name="locationId">The location identifier</param>
        /// <param name="locationType">The location type</param>
        /// <param name="hierarchyId">The hierarchy identifier</param>
        /// <param name="levels">The number of level to traverse within hierarchy</param>
        /// <returns>A list of locations with statuses founded using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Location>>> GetLocationListAvailabilityStructureAsync(int listId, int locationId, LocationType locationType, int hierarchyId, int? levels, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a list of available location list Ids by location identifier</summary>
        /// <param name="locationId">The location identifier</param>
        /// <param name="locationType">The location type</param>
        /// <returns>A List of available location list identifier for this location</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<int>>> GetLocationListAvailabilityByLocationIdAsync(int locationId, LocationType locationType);
    
        /// <summary>Get a list of available location list Ids by location identifier</summary>
        /// <param name="locationId">The location identifier</param>
        /// <param name="locationType">The location type</param>
        /// <returns>A List of available location list identifier for this location</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<int>>> GetLocationListAvailabilityByLocationIdAsync(int locationId, LocationType locationType, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a list of available location Ids by location list item identifier</summary>
        /// <param name="listItemId">The location list item identifier</param>
        /// <returns>A List of available location identifier for this location list item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LocationListAvailability>> GetLocationListItemAvailabilityByIdAsync(int listItemId);
    
        /// <summary>Get a list of available location Ids by location list item identifier</summary>
        /// <param name="listItemId">The location list item identifier</param>
        /// <returns>A List of available location identifier for this location list item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LocationListAvailability>> GetLocationListItemAvailabilityByIdAsync(int listItemId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Set availability for a location list item</summary>
        /// <param name="listItemId">The location list item identifier</param>
        /// <param name="body">The updated availability for selected location list item</param>
        /// <returns>The availability was successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetLocationListItemAvailabilityAsync(int listItemId, LocationListAvailabilityDetails body);
    
        /// <summary>Set availability for a location list item</summary>
        /// <param name="listItemId">The location list item identifier</param>
        /// <param name="body">The updated availability for selected location list item</param>
        /// <returns>The availability was successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task SetLocationListItemAvailabilityAsync(int listItemId, LocationListAvailabilityDetails body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get availability location structure for a location list item</summary>
        /// <param name="listItemId">The location list item identifier</param>
        /// <param name="locationId">The location identifier</param>
        /// <param name="locationType">The location type</param>
        /// <param name="hierarchyId">The hierarchy identifier</param>
        /// <param name="levels">The number of level to traverse within hierarchy</param>
        /// <returns>A list of locations with statuses founded using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Location>>> GetLocationListItemAvailabilityStructureAsync(int listItemId, int locationId, LocationType locationType, int hierarchyId, int? levels);
    
        /// <summary>Get availability location structure for a location list item</summary>
        /// <param name="listItemId">The location list item identifier</param>
        /// <param name="locationId">The location identifier</param>
        /// <param name="locationType">The location type</param>
        /// <param name="hierarchyId">The hierarchy identifier</param>
        /// <param name="levels">The number of level to traverse within hierarchy</param>
        /// <returns>A list of locations with statuses founded using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<Location>>> GetLocationListItemAvailabilityStructureAsync(int listItemId, int locationId, LocationType locationType, int hierarchyId, int? levels, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a list of available location list item Ids by parent List and location identifier</summary>
        /// <param name="locationId">The location identifier</param>
        /// <param name="listId">The parent list identifier</param>
        /// <param name="locationType">The location type</param>
        /// <returns>A List of available location item list identifier for this location</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<int>>> GetLocationListItemAvailabilityByLocationIdAsync(int locationId, int listId, LocationType locationType);
    
        /// <summary>Get a list of available location list item Ids by parent List and location identifier</summary>
        /// <param name="locationId">The location identifier</param>
        /// <param name="listId">The parent list identifier</param>
        /// <param name="locationType">The location type</param>
        /// <returns>A List of available location item list identifier for this location</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<int>>> GetLocationListItemAvailabilityByLocationIdAsync(int locationId, int listId, LocationType locationType, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get categories via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of categories via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupCategoriesByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, CategoryRepositoryAdapterFilters body);
    
        /// <summary>Get categories via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of categories via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupCategoriesByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, CategoryRepositoryAdapterFilters body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get contractors via a lookup</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of contractors via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupContractorsAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, LookupRequest body);
    
        /// <summary>Get contractors via a lookup</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of contractors via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupContractorsAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, LookupRequest body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get contractors via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of contractors via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupContractorsByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, ContractorRepositoryAdapterFilters body);
    
        /// <summary>Get contractors via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of contractors via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupContractorsByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, ContractorRepositoryAdapterFilters body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get countries via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of countries via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupCountriesByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, CountryRepositoryAdapterFilters body);
    
        /// <summary>Get countries via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of countries via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupCountriesByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, CountryRepositoryAdapterFilters body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get country divisions via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of country divisions via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupCountryDivisionsByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, CountryDivisionRepositoryAdapterFilters body);
    
        /// <summary>Get country divisions via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of country divisions via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupCountryDivisionsByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, CountryDivisionRepositoryAdapterFilters body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get currencies via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of currencies via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupCurrenciesByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, CurrencyRepositoryAdapterFilters body);
    
        /// <summary>Get currencies via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of currencies via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupCurrenciesByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, CurrencyRepositoryAdapterFilters body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get genders via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of genders via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupGendersByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, GenderRepositoryAdapterFilters body);
    
        /// <summary>Get genders via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of genders via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupGendersByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, GenderRepositoryAdapterFilters body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get list items via a lookup</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of list items via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupListItemsAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, LookupRequest body);
    
        /// <summary>Get list items via a lookup</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of list items via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupListItemsAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, LookupRequest body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get list items via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of list items via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupListItemsByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, ListItemRepositoryAdapterFilters body);
    
        /// <summary>Get list items via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of list items via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupListItemsByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, ListItemRepositoryAdapterFilters body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get locations via a lookup</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of locations via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupLocationsResponse>> LookupLocationsAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, LookupRequest body);
    
        /// <summary>Get locations via a lookup</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of locations via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupLocationsResponse>> LookupLocationsAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, LookupRequest body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get locations via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of locations via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupLocationsResponse>> LookupLocationsByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, LocationRepositoryAdapterFilters body);
    
        /// <summary>Get locations via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of locations via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupLocationsResponse>> LookupLocationsByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, LocationRepositoryAdapterFilters body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get personRelationshipTypes via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of personRelationshipTypes via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupPersonRelationshipTypesByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, PersonRelationshipTypeRepositoryAdapterFilters body);
    
        /// <summary>Get personRelationshipTypes via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of personRelationshipTypes via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupPersonRelationshipTypesByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, PersonRelationshipTypeRepositoryAdapterFilters body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get persons via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of persons via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupPersonsByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, PersonRepositoryAdapterFilters body);
    
        /// <summary>Get persons via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of persons via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupPersonsByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, PersonRepositoryAdapterFilters body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get roles via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of roles via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupRolesByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, RoleRepositoryAdapterFilters body);
    
        /// <summary>Get roles via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of roles via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupRolesByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, RoleRepositoryAdapterFilters body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get states via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of states via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupStatesByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, StateRepositoryAdapterFilters body);
    
        /// <summary>Get states via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of states via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupStatesByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, StateRepositoryAdapterFilters body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get units via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of units via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupUnitsByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, UnitRepositoryAdapterFilters body);
    
        /// <summary>Get units via a lookup using adapter filters.</summary>
        /// <param name="input">The text used to filter lookup data.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of units via lookup</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LookupResponse>> LookupUnitsByAdapterAsync(string input, int? pageNumber, int? pageSize, string sortBy, string sortOrder, UnitRepositoryAdapterFilters body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Insert a white listed mobile access token</summary>
        /// <param name="body">The token to be persisted</param>
        /// <returns>token is successfully inserted for user</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task InsertMobileTokenAsync(AddSessionTokenRequest body);
    
        /// <summary>Insert a white listed mobile access token</summary>
        /// <param name="body">The token to be persisted</param>
        /// <returns>token is successfully inserted for user</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task InsertMobileTokenAsync(AddSessionTokenRequest body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Perform a check to determine whether token is still valid</summary>
        /// <param name="body">Provides information about the token to be verified</param>
        /// <returns>token in question is still valid</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task VerifyMobileTokenAsync(SessionToken body);
    
        /// <summary>Perform a check to determine whether token is still valid</summary>
        /// <param name="body">Provides information about the token to be verified</param>
        /// <returns>token in question is still valid</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task VerifyMobileTokenAsync(SessionToken body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Perform a log out from mobile device</summary>
        /// <param name="body">The token to be removed</param>
        /// <returns>token is removed successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveMobileTokenAsync(SessionToken body);
    
        /// <summary>Perform a log out from mobile device</summary>
        /// <param name="body">The token to be removed</param>
        /// <returns>token is removed successfully</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task RemoveMobileTokenAsync(SessionToken body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Mobile endpoint for getting a list of responsibilities available to mobile</summary>
        /// <returns>Raw extract of list item exclusion</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<MobileReponsibilities>> GetMobileResponsibilitiesAsync();
    
        /// <summary>Mobile endpoint for getting a list of responsibilities available to mobile</summary>
        /// <returns>Raw extract of list item exclusion</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<MobileReponsibilities>> GetMobileResponsibilitiesAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get list exclusion</summary>
        /// <returns>Raw extract of list exclusion</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<ListExclusion>>> GetListExclusionAsync();
    
        /// <summary>Get list exclusion</summary>
        /// <returns>Raw extract of list exclusion</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<ListExclusion>>> GetListExclusionAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get list item Exclusion</summary>
        /// <returns>Raw extract of list item exclusion</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<ListItemExclusion>>> GetListItemExclusionAsync();
    
        /// <summary>Get list item Exclusion</summary>
        /// <returns>Raw extract of list item exclusion</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.ObjectModel.Collection<ListItemExclusion>>> GetListItemExclusionAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Adds a new notification into queue</summary>
        /// <returns>The notification rule dentifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> AddNotificationRuleAsync(NotificationRule body);
    
        /// <summary>Adds a new notification into queue</summary>
        /// <returns>The notification rule dentifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> AddNotificationRuleAsync(NotificationRule body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>updates a notification rule</summary>
        /// <returns>The notification rule identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> UpdateNotificationRuleAsync(int notificationTriggerId, NotificationRule body);
    
        /// <summary>updates a notification rule</summary>
        /// <returns>The notification rule identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> UpdateNotificationRuleAsync(int notificationTriggerId, NotificationRule body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>deletes a notification rule</summary>
        /// <returns>Notification Rule has been deleted</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteNotificationRuleAsync(int notificationTriggerId);
    
        /// <summary>deletes a notification rule</summary>
        /// <returns>Notification Rule has been deleted</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeleteNotificationRuleAsync(int notificationTriggerId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Returns the notification rules</summary>
        /// <param name="notificationId">The notification id.</param>
        /// <param name="notificationTriggerId">The notification trigger id.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<NotificationRules>> GetNotificationRulesAsync(int notificationId, int notificationTriggerId);
    
        /// <summary>Returns the notification rules</summary>
        /// <param name="notificationId">The notification id.</param>
        /// <param name="notificationTriggerId">The notification trigger id.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<NotificationRules>> GetNotificationRulesAsync(int notificationId, int notificationTriggerId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Search for persons by params</summary>
        /// <param name="employmentStatus">Status of the person ( active = 11, inactive = 12 )</param>
        /// <param name="displayName">Display Name of the Person</param>
        /// <param name="location">Associated Location to the person</param>
        /// <param name="emailAddress">Email address of the person</param>
        /// <param name="firstName">First Name of the person</param>
        /// <param name="lastName">Last Name of the person</param>
        /// <param name="countryDivision">State or Province of the person</param>
        /// <param name="country">Country of the person</param>
        /// <param name="relationshipToCompany">Relationship Type</param>
        /// <param name="contractingCompany">Contracting company of the person</param>
        /// <param name="customerName">Customer's Name of the Person</param>
        /// <param name="supervisor">Supervisor of the Person</param>
        /// <param name="startDateStart">Start date of range for Hire Date of the Person</param>
        /// <param name="startDateEnd">End date of range for Hire Date of the Person</param>
        /// <param name="endDateStart">Start date of range for End Date of the Person</param>
        /// <param name="endDateEnd">End date of range for End Date of the Person</param>
        /// <param name="currentPositionStartDateStart">Start date of range for Current Position Start Date of the Person</param>
        /// <param name="currentPositionStartDateEnd">End date of range for Current Position Start Date of the Person</param>
        /// <param name="employeeID">EmployeeID</param>
        /// <param name="currentPosition">Current Position of the Person</param>
        /// <param name="loginAccessRequired">Person requires login access or not</param>
        /// <param name="username">Username of the person</param>
        /// <param name="loginExpirationDateStart">Start date of range for Expiry Date of the Person</param>
        /// <param name="loginExpirationDateEnd">End date of range for Expiry Date of the Person</param>
        /// <param name="contactPreference">Contact Type of the person email/phone</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of persons founded using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<PersonsResponse>> GetPersonsAsync(System.Collections.Generic.IEnumerable<int> employmentStatus, string displayName, System.Collections.Generic.IEnumerable<int> location, string emailAddress, string firstName, string lastName, System.Collections.Generic.IEnumerable<int> countryDivision, System.Collections.Generic.IEnumerable<int> country, System.Collections.Generic.IEnumerable<int> relationshipToCompany, System.Collections.Generic.IEnumerable<int> contractingCompany, System.Collections.Generic.IEnumerable<int> customerName, System.Collections.Generic.IEnumerable<int> supervisor, System.DateTimeOffset? startDateStart, System.DateTimeOffset? startDateEnd, System.DateTimeOffset? endDateStart, System.DateTimeOffset? endDateEnd, System.DateTimeOffset? currentPositionStartDateStart, System.DateTimeOffset? currentPositionStartDateEnd, string employeeID, string currentPosition, bool? loginAccessRequired, string username, System.DateTimeOffset? loginExpirationDateStart, System.DateTimeOffset? loginExpirationDateEnd, System.Collections.Generic.IEnumerable<int> contactPreference, int? pageNumber, int? pageSize, string sortBy, string sortOrder);
    
        /// <summary>Search for persons by params</summary>
        /// <param name="employmentStatus">Status of the person ( active = 11, inactive = 12 )</param>
        /// <param name="displayName">Display Name of the Person</param>
        /// <param name="location">Associated Location to the person</param>
        /// <param name="emailAddress">Email address of the person</param>
        /// <param name="firstName">First Name of the person</param>
        /// <param name="lastName">Last Name of the person</param>
        /// <param name="countryDivision">State or Province of the person</param>
        /// <param name="country">Country of the person</param>
        /// <param name="relationshipToCompany">Relationship Type</param>
        /// <param name="contractingCompany">Contracting company of the person</param>
        /// <param name="customerName">Customer's Name of the Person</param>
        /// <param name="supervisor">Supervisor of the Person</param>
        /// <param name="startDateStart">Start date of range for Hire Date of the Person</param>
        /// <param name="startDateEnd">End date of range for Hire Date of the Person</param>
        /// <param name="endDateStart">Start date of range for End Date of the Person</param>
        /// <param name="endDateEnd">End date of range for End Date of the Person</param>
        /// <param name="currentPositionStartDateStart">Start date of range for Current Position Start Date of the Person</param>
        /// <param name="currentPositionStartDateEnd">End date of range for Current Position Start Date of the Person</param>
        /// <param name="employeeID">EmployeeID</param>
        /// <param name="currentPosition">Current Position of the Person</param>
        /// <param name="loginAccessRequired">Person requires login access or not</param>
        /// <param name="username">Username of the person</param>
        /// <param name="loginExpirationDateStart">Start date of range for Expiry Date of the Person</param>
        /// <param name="loginExpirationDateEnd">End date of range for Expiry Date of the Person</param>
        /// <param name="contactPreference">Contact Type of the person email/phone</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>A list of persons founded using provided criteria</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<PersonsResponse>> GetPersonsAsync(System.Collections.Generic.IEnumerable<int> employmentStatus, string displayName, System.Collections.Generic.IEnumerable<int> location, string emailAddress, string firstName, string lastName, System.Collections.Generic.IEnumerable<int> countryDivision, System.Collections.Generic.IEnumerable<int> country, System.Collections.Generic.IEnumerable<int> relationshipToCompany, System.Collections.Generic.IEnumerable<int> contractingCompany, System.Collections.Generic.IEnumerable<int> customerName, System.Collections.Generic.IEnumerable<int> supervisor, System.DateTimeOffset? startDateStart, System.DateTimeOffset? startDateEnd, System.DateTimeOffset? endDateStart, System.DateTimeOffset? endDateEnd, System.DateTimeOffset? currentPositionStartDateStart, System.DateTimeOffset? currentPositionStartDateEnd, string employeeID, string currentPosition, bool? loginAccessRequired, string username, System.DateTimeOffset? loginExpirationDateStart, System.DateTimeOffset? loginExpirationDateEnd, System.Collections.Generic.IEnumerable<int> contactPreference, int? pageNumber, int? pageSize, string sortBy, string sortOrder, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Updates a person based on person id</summary>
        /// <returns>The person was successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdatePersonAsync(UpdatePersonParams body);
    
        /// <summary>Updates a person based on person id</summary>
        /// <returns>The person was successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task UpdatePersonAsync(UpdatePersonParams body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates a new person and returns the person id</summary>
        /// <returns>The new person identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreatePersonAsync(Person body);
    
        /// <summary>Creates a new person and returns the person id</summary>
        /// <returns>The new person identifier</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreatePersonAsync(Person body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Delete a person by person id</summary>
        /// <param name="personId">The person identifier</param>
        /// <returns>Person has been deleted</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePersonAsync(int personId);
    
        /// <summary>Delete a person by person id</summary>
        /// <param name="personId">The person identifier</param>
        /// <returns>Person has been deleted</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeletePersonAsync(int personId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Returns the person based on person id</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Person>> GetPersonByIdAsync(int personId);
    
        /// <summary>Returns the person based on person id</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Person>> GetPersonByIdAsync(int personId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update the password for the current user.</summary>
        /// <returns>The person was successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdatePersonsPasswordAsync(int personId, FormsAuthPasswordUpdate body);
    
        /// <summary>Update the password for the current user.</summary>
        /// <returns>The person was successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task UpdatePersonsPasswordAsync(int personId, FormsAuthPasswordUpdate body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Validate the password for the provided user.</summary>
        /// <returns>Password validation result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<PasswordValidationResult>> ValidatePersonsPasswordAsync(int personId, FormsAuthPasswordUpdate body);
    
        /// <summary>Validate the password for the provided user.</summary>
        /// <returns>Password validation result</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<PasswordValidationResult>> ValidatePersonsPasswordAsync(int personId, FormsAuthPasswordUpdate body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Returns the person's personalization based on person id</summary>
        /// <param name="browserCountryISOCode">Detected user's country ISO Code</param>
        /// <param name="browserTimeZoneName">Detected user's timezone name</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Personalization>> GetPersonPersonalizationAsync(int personId, string browserCountryISOCode, string browserTimeZoneName);
    
        /// <summary>Returns the person's personalization based on person id</summary>
        /// <param name="browserCountryISOCode">Detected user's country ISO Code</param>
        /// <param name="browserTimeZoneName">Detected user's timezone name</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Personalization>> GetPersonPersonalizationAsync(int personId, string browserCountryISOCode, string browserTimeZoneName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Updates a personalization based on person id</summary>
        /// <returns>The person was successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdatePersonPersonalizationAsync(int personId, UpdatePersonalization body);
    
        /// <summary>Updates a personalization based on person id</summary>
        /// <returns>The person was successfully updated</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task UpdatePersonPersonalizationAsync(int personId, UpdatePersonalization body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Returns persons based on name</summary>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<PersonsResponse>> GetPersonsByNameAsync(string name, int? pageNumber, int? pageSize);
    
        /// <summary>Returns persons based on name</summary>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<PersonsResponse>> GetPersonsByNameAsync(string name, int? pageNumber, int? pageSize, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Validate person attributes</summary>
        /// <param name="ruleSet">the array of rule set we need validate on person</param>
        /// <returns>validation succcess without errors</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ValidatePersonAsync(System.Collections.Generic.IEnumerable<PersonValidationRuleSet> ruleSet, Person body);
    
        /// <summary>Validate person attributes</summary>
        /// <param name="ruleSet">the array of rule set we need validate on person</param>
        /// <returns>validation succcess without errors</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task ValidatePersonAsync(System.Collections.Generic.IEnumerable<PersonValidationRuleSet> ruleSet, Person body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create a new record.</summary>
        /// <param name="productId">The id of the configuration product to create the record under.</param>
        /// <returns>The records entity data.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> CreateEntityDataAsync(int productId, System.IO.Stream body);
    
        /// <summary>Create a new record.</summary>
        /// <param name="productId">The id of the configuration product to create the record under.</param>
        /// <returns>The records entity data.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> CreateEntityDataAsync(int productId, System.IO.Stream body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a records entity data.</summary>
        /// <param name="productId">The id of the configuration product to get the record from.</param>
        /// <param name="recordId">The id of the  record.</param>
        /// <returns>The records entity data.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetEntityDataAsync(int productId, int recordId);
    
        /// <summary>Get a records entity data.</summary>
        /// <param name="productId">The id of the configuration product to get the record from.</param>
        /// <param name="recordId">The id of the  record.</param>
        /// <returns>The records entity data.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetEntityDataAsync(int productId, int recordId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update a records entity data.</summary>
        /// <param name="productId">The id of the configuration product to update the record.</param>
        /// <param name="recordId">The id of the  record.</param>
        /// <returns>The records entity data.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> UpdateEntityDataAsync(int productId, int recordId, System.IO.Stream body);
    
        /// <summary>Update a records entity data.</summary>
        /// <param name="productId">The id of the configuration product to update the record.</param>
        /// <param name="recordId">The id of the  record.</param>
        /// <returns>The records entity data.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> UpdateEntityDataAsync(int productId, int recordId, System.IO.Stream body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deletes a records.</summary>
        /// <param name="productId">The id of the configuration product for the record.</param>
        /// <param name="recordId">The id of therecord.</param>
        /// <returns>The records was successfully deleted</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteRecordAsync(int productId, int recordId);
    
        /// <summary>Deletes a records.</summary>
        /// <param name="productId">The id of the configuration product for the record.</param>
        /// <param name="recordId">The id of therecord.</param>
        /// <returns>The records was successfully deleted</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeleteRecordAsync(int productId, int recordId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the product records for a view.</summary>
        /// <param name="productId">The id of the configuration product to get records for.</param>
        /// <returns>The product records to include in a view.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetProductRecordsAsync(int productId, System.IO.Stream body);
    
        /// <summary>Get the product records for a view.</summary>
        /// <param name="productId">The id of the configuration product to get records for.</param>
        /// <returns>The product records to include in a view.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetProductRecordsAsync(int productId, System.IO.Stream body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the product records for a view.</summary>
        /// <param name="productId">The id of the configuration product to get records for.</param>
        /// <param name="viewId">The id of the view to get product records for.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <param name="body">The non default filters applied along with the view filters</param>
        /// <returns>The product records to include in a view.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetProductRecordsForViewAsync(int productId, int viewId, int? pageNumber, int? pageSize, string sortBy, string sortOrder, System.IO.Stream body);
    
        /// <summary>Get the product records for a view.</summary>
        /// <param name="productId">The id of the configuration product to get records for.</param>
        /// <param name="viewId">The id of the view to get product records for.</param>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <param name="body">The non default filters applied along with the view filters</param>
        /// <returns>The product records to include in a view.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetProductRecordsForViewAsync(int productId, int viewId, int? pageNumber, int? pageSize, string sortBy, string sortOrder, System.IO.Stream body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get a list of archived product records.</summary>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>The applicable archived product records.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<ArchivedRecordResponse>> SearchArchivedRecordsAsync(int? pageNumber, int? pageSize, string sortBy, string sortOrder, ArchivedRecordSearchParams body);
    
        /// <summary>Get a list of archived product records.</summary>
        /// <param name="pageNumber">Which page of results to fetch.</param>
        /// <param name="pageSize">The number of elements on each page to fetch</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <returns>The applicable archived product records.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<ArchivedRecordResponse>> SearchArchivedRecordsAsync(int? pageNumber, int? pageSize, string sortBy, string sortOrder, ArchivedRecordSearchParams body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Restore a set of archived product records and their children</summary>
        /// <returns>The achived records were successfully restored.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RestoreArchivedRecordsAsync(System.Collections.Generic.IEnumerable<ArchivedRecordIds> body);
    
        /// <summary>Restore a set of archived product records and their children</summary>
        /// <returns>The achived records were successfully restored.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task RestoreArchivedRecordsAsync(System.Collections.Generic.IEnumerable<ArchivedRecordIds> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Permanently delete a set of archived product records and their children.</summary>
        /// <returns>The achived records were successfully deleted.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteArchivedRecordsAsync(System.Collections.Generic.IEnumerable<ArchivedRecordIds> body);
    
        /// <summary>Permanently delete a set of archived product records and their children.</summary>
        /// <returns>The achived records were successfully deleted.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeleteArchivedRecordsAsync(System.Collections.Generic.IEnumerable<ArchivedRecordIds> body, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>current version of API</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetversionAsync();
    
        /// <returns>current version of API</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> GetversionAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestError 
    {
        /// <summary>The error code if existed</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        public int Code { get; set; }
    
        /// <summary>The error message</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }
    
        /// <summary>the array of nested detail errors</summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RequestErrorDetail> Errors { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static RequestError FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RequestError>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestErrorDetail 
    {
        /// <summary>The error code if existed</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }
    
        /// <summary>The error id / attribute id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>The error name / attribute name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The error message</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static RequestErrorDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RequestErrorDetail>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Status201Response 
    {
        /// <summary>The new object identifier</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Status201Response FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Status201Response>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Status201MultipleResponses 
    {
        /// <summary>The new object identifiers</summary>
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> Ids { get; set; } = new System.Collections.ObjectModel.Collection<int>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Status201MultipleResponses FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Status201MultipleResponses>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResponseList 
    {
        /// <summary>Total count of items in this response set. If this response is
        /// paginated, then the length of the `items` array will be less than or
        /// equal to the `totalCount`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalCount { get; set; }
    
        /// <summary>The data point to sort on.</summary>
        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SortOrder { get; set; }
    
        /// <summary>The direction to apply the sorting.</summary>
        [Newtonsoft.Json.JsonProperty("sortDirection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SortDirection { get; set; }
    
        /// <summary>The current page number.</summary>
        [Newtonsoft.Json.JsonProperty("pageNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PageNumber { get; set; }
    
        /// <summary>The number of items available on a given page.</summary>
        [Newtonsoft.Json.JsonProperty("pageSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PageSize { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResponseList FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResponseList>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Account 
    {
        /// <summary>The unique account id</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AccountId { get; set; }
    
        /// <summary>The external account id</summary>
        [Newtonsoft.Json.JsonProperty("externalAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ExternalAccountId { get; set; }
    
        /// <summary>The company domain</summary>
        [Newtonsoft.Json.JsonProperty("companyDomain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyDomain { get; set; }
    
        /// <summary>The name of the account</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The maximum number of hierarchies the account allows.</summary>
        [Newtonsoft.Json.JsonProperty("maxHierarchies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxHierarchies { get; set; }
    
        /// <summary>The maximum number of locations the account allows.</summary>
        [Newtonsoft.Json.JsonProperty("maxLocations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxLocations { get; set; }
    
        /// <summary>The number of days a password is valid.</summary>
        [Newtonsoft.Json.JsonProperty("passwordValidityDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PasswordValidityDays { get; set; }
    
        /// <summary>Whether two factor authentication is enabled for the account.</summary>
        [Newtonsoft.Json.JsonProperty("enableTwoFactorAuthentication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableTwoFactorAuthentication { get; set; }
    
        /// <summary>Whether the machine translation is allowed.</summary>
        [Newtonsoft.Json.JsonProperty("disableMachineTranslations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisableMachineTranslations { get; set; }
    
        /// <summary>Enables a system notification.</summary>
        [Newtonsoft.Json.JsonProperty("enableSystemNotifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableSystemNotifications { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Account FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Account>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountUser 
    {
        /// <summary>The unique account id</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AccountId { get; set; }
    
        /// <summary>The company domain</summary>
        [Newtonsoft.Json.JsonProperty("companyDomain", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyDomain { get; set; }
    
        /// <summary>The obscured username of the user.</summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }
    
        /// <summary>The obscured email of the user.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        /// <summary>The obscured phone number of the user.</summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AccountUser FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AccountUser>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateAccountCurrencyList 
    {
        /// <summary>list of currency Id list to add</summary>
        [Newtonsoft.Json.JsonProperty("addCurrencyIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> AddCurrencyIdList { get; set; }
    
        /// <summary>list of currency Id list to delete</summary>
        [Newtonsoft.Json.JsonProperty("deleteCurrencyIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> DeleteCurrencyIdList { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UpdateAccountCurrencyList FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateAccountCurrencyList>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateAccountCountryList 
    {
        /// <summary>list of country Id list to add</summary>
        [Newtonsoft.Json.JsonProperty("addCountryIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> AddCountryIdList { get; set; }
    
        /// <summary>list of country Id list to delete</summary>
        [Newtonsoft.Json.JsonProperty("deleteCountryIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> DeleteCountryIdList { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UpdateAccountCountryList FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateAccountCountryList>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Language 
    {
        [Newtonsoft.Json.JsonProperty("languageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LanguageId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("languageName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nativeLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NativeLanguage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("defaultLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DefaultLanguage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Language FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Language>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AuthenticationMethod 
    {
        /// <summary>The authentication method id.</summary>
        [Newtonsoft.Json.JsonProperty("authenticationMethodId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AuthenticationMethodId { get; set; }
    
        /// <summary>The name of the authentication method.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AuthenticationMethod FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AuthenticationMethod>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FormsAuthPasswordUpdate 
    {
        /// <summary>The users password</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }
    
        /// <summary>The forgot password key</summary>
        [Newtonsoft.Json.JsonProperty("forgotPasswordKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ForgotPasswordKey { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FormsAuthPasswordUpdate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FormsAuthPasswordUpdate>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FormsAuthState 
    {
        /// <summary>Whether the user is required to change their password or not.</summary>
        [Newtonsoft.Json.JsonProperty("passwordChangeRequired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PasswordChangeRequired { get; set; }
    
        /// <summary>Whether the user is locked</summary>
        [Newtonsoft.Json.JsonProperty("isLocked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLocked { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FormsAuthState FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FormsAuthState>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FormsAuthPasswordChangeRequest 
    {
        /// <summary>The username</summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }
    
        /// <summary>The method in which to deliver the forgot password information.</summary>
        [Newtonsoft.Json.JsonProperty("deliveryMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FormsAuthPasswordChangeRequestDeliveryMethod DeliveryMethod { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FormsAuthPasswordChangeRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FormsAuthPasswordChangeRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FormsAuthPasswordChangeResponse 
    {
        /// <summary>The id of the person being authenticated.</summary>
        [Newtonsoft.Json.JsonProperty("personId", Required = Newtonsoft.Json.Required.Always)]
        public int PersonId { get; set; }
    
        /// <summary>The forgot password key</summary>
        [Newtonsoft.Json.JsonProperty("forgotPasswordKey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ForgotPasswordKey { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FormsAuthPasswordChangeResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FormsAuthPasswordChangeResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FormsAuthBlacklistRequest 
    {
        /// <summary>The id of the json web token</summary>
        [Newtonsoft.Json.JsonProperty("jti", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Jti { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expirydate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Expirydate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FormsAuthBlacklistRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FormsAuthBlacklistRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FormsAuthBlacklistResponse 
    {
        /// <summary>The boolean value whether the jti exists</summary>
        [Newtonsoft.Json.JsonProperty("blacklistresponsecode", Required = Newtonsoft.Json.Required.Always)]
        public bool Blacklistresponsecode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FormsAuthBlacklistResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FormsAuthBlacklistResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FormsAuthPasswordRule 
    {
        /// <summary>The id of the password rule.</summary>
        [Newtonsoft.Json.JsonProperty("ruleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RuleId { get; set; }
    
        /// <summary>The description of the password rule.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The value for the rule.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FormsAuthPasswordRule FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FormsAuthPasswordRule>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FormsAuthCrediential 
    {
        /// <summary>Unique identifier for the customer account</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId { get; set; }
    
        /// <summary>The username</summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }
    
        /// <summary>The users password</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FormsAuthCrediential FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FormsAuthCrediential>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FormsAuthVerificationResult 
    {
        /// <summary>The id of the person being authenticated.</summary>
        [Newtonsoft.Json.JsonProperty("personId", Required = Newtonsoft.Json.Required.Always)]
        public int PersonId { get; set; }
    
        /// <summary>The id of the language for the current user.</summary>
        [Newtonsoft.Json.JsonProperty("languageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LanguageId { get; set; }
    
        /// <summary>The display of the person being authenticated.</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }
    
        /// <summary>The email of the person being authenticated.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        /// <summary>Whether the user is required to change their password or not.</summary>
        [Newtonsoft.Json.JsonProperty("passwordChangeRequired", Required = Newtonsoft.Json.Required.Always)]
        public bool PasswordChangeRequired { get; set; }
    
        /// <summary>Whether the user required additional identity verification.</summary>
        [Newtonsoft.Json.JsonProperty("identityVerificationRequired", Required = Newtonsoft.Json.Required.Always)]
        public bool IdentityVerificationRequired { get; set; }
    
        /// <summary>Whether the user is locked</summary>
        [Newtonsoft.Json.JsonProperty("isLocked", Required = Newtonsoft.Json.Required.Always)]
        public bool IsLocked { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FormsAuthVerificationResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FormsAuthVerificationResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FormsAuthKey 
    {
        /// <summary>The forms auth key used to ensure only the specific user is performing an authentication action prior to full authentication.</summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FormsAuthKey FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FormsAuthKey>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SsoAuthCrediential 
    {
        /// <summary>The connection name that maps to the account.</summary>
        [Newtonsoft.Json.JsonProperty("ssoConnection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SsoConnection { get; set; }
    
        /// <summary>The serialized SSO user information.</summary>
        [Newtonsoft.Json.JsonProperty("ssoLoginUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SsoLoginUser { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SsoAuthCrediential FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SsoAuthCrediential>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SsoAuthVerificationResult 
    {
        /// <summary>The id of the account the person is authenticated against.</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AccountId { get; set; }
    
        /// <summary>The id of the person being authenticated.</summary>
        [Newtonsoft.Json.JsonProperty("personId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PersonId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SsoAuthVerificationResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SsoAuthVerificationResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SsoIdentityProvider 
    {
        /// <summary>The unique id for the identity provider.</summary>
        [Newtonsoft.Json.JsonProperty("identityProviderSettingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdentityProviderSettingId { get; set; }
    
        /// <summary>The id of the signing certificate.</summary>
        [Newtonsoft.Json.JsonProperty("signingCertificateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SigningCertificateId { get; set; }
    
        /// <summary>The id of the decrypting certificate.</summary>
        [Newtonsoft.Json.JsonProperty("decryptingCertificateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecryptingCertificateId { get; set; }
    
        /// <summary>Whether the SAML response from the partner identity provider should be signed.</summary>
        [Newtonsoft.Json.JsonProperty("wantSamlResponseSigned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WantSamlResponseSigned { get; set; }
    
        /// <summary>Whether the SAML assertion from the partner identity provider should be signed.</summary>
        [Newtonsoft.Json.JsonProperty("wantAssertionSigned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WantAssertionSigned { get; set; }
    
        /// <summary>Whether the SAML assertion from the partner identity provider should be encrypted.</summary>
        [Newtonsoft.Json.JsonProperty("wantAssertionEncrypted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WantAssertionEncrypted { get; set; }
    
        /// <summary>The time span to allow for differences between local and partner computer clocks when checking time intervals.</summary>
        [Newtonsoft.Json.JsonProperty("clockSkew", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ClockSkew { get; set; }
    
        /// <summary>The trust name of the Identity Provider</summary>
        [Newtonsoft.Json.JsonProperty("trustName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrustName { get; set; }
    
        /// <summary>The display name for the identity provider</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }
    
        /// <summary>The URL for the Identity Provider single sign on service.</summary>
        [Newtonsoft.Json.JsonProperty("singleSignOnServiceUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SingleSignOnServiceUrl { get; set; }
    
        /// <summary>The local trust name for the EHS application.</summary>
        [Newtonsoft.Json.JsonProperty("localTrustName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocalTrustName { get; set; }
    
        /// <summary>The username</summary>
        [Newtonsoft.Json.JsonProperty("assertionToClientMapper", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssertionToClientMapper { get; set; }
    
        /// <summary>The mapper for determine who the person is based on the SSO Assertions username.</summary>
        [Newtonsoft.Json.JsonProperty("userNameToPersonMapper", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserNameToPersonMapper { get; set; }
    
        /// <summary>Whether the identify provider is active or not.</summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SsoIdentityProvider FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SsoIdentityProvider>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SsoServiceProvider 
    {
        /// <summary>The unique id for the service provider.</summary>
        [Newtonsoft.Json.JsonProperty("serviceProviderSettingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceProviderSettingId { get; set; }
    
        /// <summary>The id of the signing certificate.</summary>
        [Newtonsoft.Json.JsonProperty("signingCertificateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SigningCertificateId { get; set; }
    
        /// <summary>The id of the encrypting certificate.</summary>
        [Newtonsoft.Json.JsonProperty("encryptingCertificateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EncryptingCertificateId { get; set; }
    
        /// <summary>Whether SAML responses sent to the partner service provider should be signed.</summary>
        [Newtonsoft.Json.JsonProperty("signSamlResponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SignSamlResponse { get; set; }
    
        /// <summary>Whether SAML assertions sent to the partner service provider should be signed.</summary>
        [Newtonsoft.Json.JsonProperty("signAssertion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SignAssertion { get; set; }
    
        /// <summary>Whether SAML assertions sent to the partner service provider should be encrypted.</summary>
        [Newtonsoft.Json.JsonProperty("encryptAssertion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EncryptAssertion { get; set; }
    
        /// <summary>Whether the service provider is for a VelocityEHS Product.</summary>
        [Newtonsoft.Json.JsonProperty("isVelocityServiceProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVelocityServiceProvider { get; set; }
    
        /// <summary>The NotBefore/NotOnOrAfter time interval for the SAML assertion.</summary>
        [Newtonsoft.Json.JsonProperty("assertionLifetime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AssertionLifetime { get; set; }
    
        /// <summary>The time span to allow for differences between local and partner computer clocks when checking time intervals.</summary>
        [Newtonsoft.Json.JsonProperty("clockSkew", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ClockSkew { get; set; }
    
        /// <summary>The order the service provider should be listed relative to other service providers.</summary>
        [Newtonsoft.Json.JsonProperty("listOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ListOrder { get; set; }
    
        /// <summary>The trust name of the Service Provider</summary>
        [Newtonsoft.Json.JsonProperty("trustName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrustName { get; set; }
    
        /// <summary>The display name of the service provider.</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }
    
        /// <summary>The service provider assertion consumer service URL.</summary>
        [Newtonsoft.Json.JsonProperty("endpointUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndpointUrl { get; set; }
    
        /// <summary>The name identifier format to include in SAML assertions sent to the partner service provider or in authn requests sent to the partner identity provider</summary>
        [Newtonsoft.Json.JsonProperty("nameIdFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NameIdFormat { get; set; }
    
        /// <summary>The XML signature digest method.</summary>
        [Newtonsoft.Json.JsonProperty("digestMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DigestMethod { get; set; }
    
        /// <summary>The XML signature method.</summary>
        [Newtonsoft.Json.JsonProperty("signatureMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SignatureMethod { get; set; }
    
        /// <summary>The XML encryption key encryption method.</summary>
        [Newtonsoft.Json.JsonProperty("keyEncryptionMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KeyEncryptionMethod { get; set; }
    
        /// <summary>The XML encryption data encryption method.</summary>
        [Newtonsoft.Json.JsonProperty("dataEncryptionMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DataEncryptionMethod { get; set; }
    
        /// <summary>The mapper for determining what value to use as the username in the assertion.</summary>
        [Newtonsoft.Json.JsonProperty("personToUserNameMapper", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonToUserNameMapper { get; set; }
    
        /// <summary>The mapper for determining what attributes to include in the assertion.</summary>
        [Newtonsoft.Json.JsonProperty("assertionAttributesProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssertionAttributesProvider { get; set; }
    
        /// <summary>The mapper for determing what relay state to provide with the assertion.</summary>
        [Newtonsoft.Json.JsonProperty("assertionRelayStateProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssertionRelayStateProvider { get; set; }
    
        /// <summary>Whether the service provider is active or not.</summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SsoServiceProvider FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SsoServiceProvider>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IdentityVerification 
    {
        /// <summary>The verification code.</summary>
        [Newtonsoft.Json.JsonProperty("verificationCode", Required = Newtonsoft.Json.Required.Always)]
        public int VerificationCode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static IdentityVerification FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IdentityVerification>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SessionToken 
    {
        /// <summary>Token to store</summary>
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }
    
        /// <summary>Date and time the token was issued</summary>
        [Newtonsoft.Json.JsonProperty("issued", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Issued { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SessionToken FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SessionToken>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddSessionTokenRequest 
    {
        /// <summary>PersonId associated with the token</summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int UserId { get; set; }
    
        /// <summary>Token to store</summary>
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }
    
        /// <summary>Date and time the token was issued</summary>
        [Newtonsoft.Json.JsonProperty("issued", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Issued { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AddSessionTokenRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AddSessionTokenRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PasswordValidationResult 
    {
        /// <summary>Token to store</summary>
        [Newtonsoft.Json.JsonProperty("isvalid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Isvalid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("unfollowedrules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FormsAuthPasswordRule> Unfollowedrules { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PasswordValidationResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PasswordValidationResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LookupFilterConfig 
    {
        /// <summary>The binding name the filter is being applied to.</summary>
        [Newtonsoft.Json.JsonProperty("binding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Binding { get; set; }
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LookupFilterOperation? Operation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static LookupFilterConfig FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LookupFilterConfig>(data);
        }
    
    }
    
    /// <summary>The filter operation being performed.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum LookupFilterOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Equals")]
        Equals = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NotEquals")]
        NotEquals = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Hierarchy 
    {
        /// <summary>The Hierarchy name</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Idendifying hierarchy as Default or not</summary>
        [Newtonsoft.Json.JsonProperty("IsDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDefault { get; set; }
    
        /// <summary>The hierarchy identifier</summary>
        [Newtonsoft.Json.JsonProperty("HierarchyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HierarchyId { get; set; }
    
        /// <summary>The hierarchy root group identifier</summary>
        [Newtonsoft.Json.JsonProperty("RootLocationGroupID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RootLocationGroupID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Hierarchy FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Hierarchy>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NewHierarchyParams 
    {
        /// <summary>The Hierarchy name</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        /// <summary>Idendifying hierarchy as Default or not</summary>
        [Newtonsoft.Json.JsonProperty("IsDefault", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDefault { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static NewHierarchyParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewHierarchyParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateHierarchyParams 
    {
        /// <summary>The Hierarchy name</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Idendifying hierarchy as Default or not</summary>
        [Newtonsoft.Json.JsonProperty("IsDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefault { get; set; }
    
        /// <summary>The hierarchy identifier</summary>
        [Newtonsoft.Json.JsonProperty("HierarchyId", Required = Newtonsoft.Json.Required.Always)]
        public int HierarchyId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UpdateHierarchyParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateHierarchyParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TranslationRequest 
    {
        /// <summary>Id of Translation Requested</summary>
        [Newtonsoft.Json.JsonProperty("translationRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TranslationRequestId { get; set; }
    
        /// <summary>Unique Id of Account</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }
    
        /// <summary>Id of Text Type</summary>
        [Newtonsoft.Json.JsonProperty("textTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TextTypeId { get; set; }
    
        /// <summary>Id of Text</summary>
        [Newtonsoft.Json.JsonProperty("textId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TextId { get; set; }
    
        /// <summary>Name of Column</summary>
        [Newtonsoft.Json.JsonProperty("columnName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColumnName { get; set; }
    
        /// <summary>Original Text</summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }
    
        /// <summary>Description of the text</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Max length of the text</summary>
        [Newtonsoft.Json.JsonProperty("maxLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxLength { get; set; }
    
        /// <summary>Id of the language</summary>
        [Newtonsoft.Json.JsonProperty("languageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LanguageID { get; set; }
    
        /// <summary>Identifier of Language</summary>
        [Newtonsoft.Json.JsonProperty("languageIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageIdentifier { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TranslationRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TranslationRequest>(data);
        }
    
    }
    
    /// <summary>The properties name for the SetTranslation is with Capital letter because these are properties of Json which need to be able to read from DB</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SetTranslation 
    {
        /// <summary>Unique Id of Account</summary>
        [Newtonsoft.Json.JsonProperty("AccountID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountID { get; set; }
    
        /// <summary>Id of Text Type</summary>
        [Newtonsoft.Json.JsonProperty("TextTypeID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TextTypeID { get; set; }
    
        /// <summary>Id of Text</summary>
        [Newtonsoft.Json.JsonProperty("TextID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TextID { get; set; }
    
        /// <summary>Name of Column</summary>
        [Newtonsoft.Json.JsonProperty("ColumnName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColumnName { get; set; }
    
        /// <summary>Id of the Language</summary>
        [Newtonsoft.Json.JsonProperty("LanguageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LanguageID { get; set; }
    
        /// <summary>Translated Text</summary>
        [Newtonsoft.Json.JsonProperty("TranslatedText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TranslatedText { get; set; }
    
        /// <summary>Id of the Translation Request</summary>
        [Newtonsoft.Json.JsonProperty("TranslationRequestID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TranslationRequestID { get; set; }
    
        /// <summary>Original Text</summary>
        [Newtonsoft.Json.JsonProperty("DefaultText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultText { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SetTranslation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetTranslation>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MachineTranslation 
    {
        /// <summary>Unique Id of account</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AccountId { get; set; }
    
        /// <summary>Unique Id of person</summary>
        [Newtonsoft.Json.JsonProperty("personId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PersonId { get; set; }
    
        /// <summary>Original Language</summary>
        [Newtonsoft.Json.JsonProperty("originalLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalLanguage { get; set; }
    
        /// <summary>Id of Translated Language</summary>
        [Newtonsoft.Json.JsonProperty("translatedLanguageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TranslatedLanguageId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static MachineTranslation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MachineTranslation>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateSentTranslationRequests 
    {
        /// <summary>List of Id of translation Requested</summary>
        [Newtonsoft.Json.JsonProperty("translationRequestIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> TranslationRequestIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UpdateSentTranslationRequests FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateSentTranslationRequests>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TimeZoneList 
    {
        /// <summary>Timezone Id</summary>
        [Newtonsoft.Json.JsonProperty("timeZoneId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TimeZoneId { get; set; }
    
        /// <summary>Timezone Name</summary>
        [Newtonsoft.Json.JsonProperty("timeZoneName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeZoneName { get; set; }
    
        /// <summary>Timezone Description</summary>
        [Newtonsoft.Json.JsonProperty("timeZoneDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeZoneDescription { get; set; }
    
        /// <summary>Timezone Offset</summary>
        [Newtonsoft.Json.JsonProperty("timeZoneOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TimeZoneOffset { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TimeZoneList FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TimeZoneList>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Currency 
    {
        /// <summary>Currency Id</summary>
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrencyId { get; set; }
    
        /// <summary>Currency Code</summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyCode { get; set; }
    
        /// <summary>Currency Description</summary>
        [Newtonsoft.Json.JsonProperty("currencyDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyDescription { get; set; }
    
        /// <summary>Currency Display String</summary>
        [Newtonsoft.Json.JsonProperty("currencyDisplayString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyDisplayString { get; set; }
    
        /// <summary>Default Currency</summary>
        [Newtonsoft.Json.JsonProperty("defaultCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DefaultCurrency { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Currency FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Currency>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Country 
    {
        /// <summary>Currency Id</summary>
        [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CountryId { get; set; }
    
        /// <summary>Currency Code</summary>
        [Newtonsoft.Json.JsonProperty("commonCountryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommonCountryName { get; set; }
    
        /// <summary>Currency Description</summary>
        [Newtonsoft.Json.JsonProperty("formalCountryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormalCountryName { get; set; }
    
        /// <summary>Default Currency</summary>
        [Newtonsoft.Json.JsonProperty("nativeCountryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NativeCountryName { get; set; }
    
        /// <summary>Default Currency</summary>
        [Newtonsoft.Json.JsonProperty("iSOCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ISOCode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Country FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Country>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UnitSystem 
    {
        /// <summary>Output of Unit value</summary>
        [Newtonsoft.Json.JsonProperty("toUnitValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ToUnitValue { get; set; }
    
        /// <summary>Output of Unit id</summary>
        [Newtonsoft.Json.JsonProperty("toUnitId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ToUnitId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UnitSystem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnitSystem>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Personalization 
    {
        /// <summary>The unique account id</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AccountId { get; set; }
    
        /// <summary>The unique person id</summary>
        [Newtonsoft.Json.JsonProperty("personId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PersonId { get; set; }
    
        /// <summary>The Preference of dateFormat language id</summary>
        [Newtonsoft.Json.JsonProperty("languageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LanguageId { get; set; }
    
        /// <summary>The dateFormat for personalization</summary>
        [Newtonsoft.Json.JsonProperty("dateFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateFormat { get; set; }
    
        /// <summary>The Preference of dateFormat for personalization</summary>
        [Newtonsoft.Json.JsonProperty("dateFormatUserPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DateFormatUserPreference { get; set; }
    
        /// <summary>The numberFormat for personalization</summary>
        [Newtonsoft.Json.JsonProperty("numberFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberFormat { get; set; }
    
        /// <summary>The Preference of numberFormat for personalization</summary>
        [Newtonsoft.Json.JsonProperty("numberFormatUserPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NumberFormatUserPreference { get; set; }
    
        /// <summary>The timeFormat for personalization</summary>
        [Newtonsoft.Json.JsonProperty("timeFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeFormat { get; set; }
    
        /// <summary>The Preference of timeFormat for personalization</summary>
        [Newtonsoft.Json.JsonProperty("timeFormatUserPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TimeFormatUserPreference { get; set; }
    
        /// <summary>Time zone Id for personalization</summary>
        [Newtonsoft.Json.JsonProperty("timeZoneId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TimeZoneId { get; set; }
    
        /// <summary>The timeZoneName for personalization</summary>
        [Newtonsoft.Json.JsonProperty("timeZoneName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeZoneName { get; set; }
    
        /// <summary>The timeZoneOffset for personalization</summary>
        [Newtonsoft.Json.JsonProperty("timeZoneOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TimeZoneOffset { get; set; }
    
        /// <summary>Currency Id for personalization</summary>
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrencyId { get; set; }
    
        /// <summary>The currencyCode for personalization</summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyCode { get; set; }
    
        /// <summary>unitSystem Id for personalization</summary>
        [Newtonsoft.Json.JsonProperty("unitSystemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UnitSystemId { get; set; }
    
        /// <summary>unitSystem for personalization</summary>
        [Newtonsoft.Json.JsonProperty("unitSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitSystem { get; set; }
    
        /// <summary>The Preference of unitSystem for personalization</summary>
        [Newtonsoft.Json.JsonProperty("unitSystemUserPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UnitSystemUserPreference { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Personalization FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Personalization>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdatePersonalization 
    {
        /// <summary>The unique person id</summary>
        [Newtonsoft.Json.JsonProperty("personId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PersonId { get; set; }
    
        /// <summary>The Preference of dateFormat language id</summary>
        [Newtonsoft.Json.JsonProperty("languageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LanguageId { get; set; }
    
        /// <summary>The dateFormat for personalization</summary>
        [Newtonsoft.Json.JsonProperty("dateFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateFormat { get; set; }
    
        /// <summary>The Preference of dateFormat for personalization</summary>
        [Newtonsoft.Json.JsonProperty("dateFormatUserPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DateFormatUserPreference { get; set; }
    
        /// <summary>The numberFormat for personalization</summary>
        [Newtonsoft.Json.JsonProperty("numberFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberFormat { get; set; }
    
        /// <summary>The Preference of numberFormat for personalization</summary>
        [Newtonsoft.Json.JsonProperty("numberFormatUserPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NumberFormatUserPreference { get; set; }
    
        /// <summary>The timeFormat for personalization</summary>
        [Newtonsoft.Json.JsonProperty("timeFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeFormat { get; set; }
    
        /// <summary>The Preference of timeFormat for personalization</summary>
        [Newtonsoft.Json.JsonProperty("timeFormatUserPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TimeFormatUserPreference { get; set; }
    
        /// <summary>Time zone Id for personalization</summary>
        [Newtonsoft.Json.JsonProperty("timeZoneId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TimeZoneId { get; set; }
    
        /// <summary>Currency Id for personalization</summary>
        [Newtonsoft.Json.JsonProperty("currencyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrencyId { get; set; }
    
        /// <summary>unitSystem Id for personalization</summary>
        [Newtonsoft.Json.JsonProperty("unitSystemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UnitSystemId { get; set; }
    
        /// <summary>The Preference of unitSystem for personalization</summary>
        [Newtonsoft.Json.JsonProperty("unitSystemUserPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UnitSystemUserPreference { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UpdatePersonalization FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatePersonalization>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Location 
    {
        /// <summary>The location identifier</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>The location name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("locationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocationType LocationType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("locationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocationStatus? LocationStatus { get; set; }
    
        /// <summary>The location parent identifiers</summary>
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentId { get; set; }
    
        /// <summary>The hierarchy identifier</summary>
        [Newtonsoft.Json.JsonProperty("hierarchyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HierarchyId { get; set; }
    
        /// <summary>The level of the node on hierarchy</summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Level { get; set; }
    
        /// <summary>The location path</summary>
        [Newtonsoft.Json.JsonProperty("paths", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Paths { get; set; }
    
        /// <summary>The available status for Location List</summary>
        [Newtonsoft.Json.JsonProperty("isAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAvailable { get; set; }
    
        /// <summary>The partial available status for Location List</summary>
        [Newtonsoft.Json.JsonProperty("isPartialAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPartialAvailable { get; set; }
    
        /// <summary>The SIC code</summary>
        [Newtonsoft.Json.JsonProperty("sicCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SicCode { get; set; }
    
        /// <summary>The NAICS code</summary>
        [Newtonsoft.Json.JsonProperty("naicsCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NaicsCode { get; set; }
    
        /// <summary>The OSHA Establishment Name</summary>
        [Newtonsoft.Json.JsonProperty("oshaEstablishmentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OshaEstablishmentName { get; set; }
    
        /// <summary>The OSHA establishment type identifier</summary>
        [Newtonsoft.Json.JsonProperty("oshaEstablishmentTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OshaEstablishmentTypeId { get; set; }
    
        /// <summary>The street address</summary>
        [Newtonsoft.Json.JsonProperty("streetAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetAddress { get; set; }
    
        /// <summary>The city name</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        /// <summary>The zip code</summary>
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZipCode { get; set; }
    
        /// <summary>The state identifier</summary>
        [Newtonsoft.Json.JsonProperty("stateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StateId { get; set; }
    
        /// <summary>The industry description</summary>
        [Newtonsoft.Json.JsonProperty("industryDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndustryDescription { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Location FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Location>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MovingLocationParams 
    {
        /// <summary>The location identifier</summary>
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Always)]
        public int LocationId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("locationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocationType LocationType { get; set; }
    
        /// <summary>The location parent identifier</summary>
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Always)]
        public int ParentId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static MovingLocationParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MovingLocationParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NewLocationParams 
    {
        /// <summary>The location name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("locationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocationType LocationType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("locationStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocationStatus LocationStatus { get; set; }
    
        /// <summary>The array of location parent identifiers</summary>
        [Newtonsoft.Json.JsonProperty("parentIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> ParentIds { get; set; }
    
        /// <summary>The hierarchy identifier</summary>
        [Newtonsoft.Json.JsonProperty("hierarchyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HierarchyId { get; set; }
    
        /// <summary>The SIC code</summary>
        [Newtonsoft.Json.JsonProperty("sicCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SicCode { get; set; }
    
        /// <summary>The NAICS code</summary>
        [Newtonsoft.Json.JsonProperty("naicsCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NaicsCode { get; set; }
    
        /// <summary>The OSHA Establishment Name</summary>
        [Newtonsoft.Json.JsonProperty("oshaEstablishmentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OshaEstablishmentName { get; set; }
    
        /// <summary>The OSHA establishment type identifier</summary>
        [Newtonsoft.Json.JsonProperty("oshaEstablishmentTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OshaEstablishmentTypeId { get; set; }
    
        /// <summary>The street address</summary>
        [Newtonsoft.Json.JsonProperty("streetAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetAddress { get; set; }
    
        /// <summary>The city name</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        /// <summary>The zip code</summary>
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZipCode { get; set; }
    
        /// <summary>The state identifier</summary>
        [Newtonsoft.Json.JsonProperty("stateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StateId { get; set; }
    
        /// <summary>The industry description</summary>
        [Newtonsoft.Json.JsonProperty("industryDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndustryDescription { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static NewLocationParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewLocationParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum LocationType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Group")]
        Group = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Location")]
        Location = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum LocationStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Inactive")]
        Inactive = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Archived")]
        Archived = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ListItem 
    {
        [Newtonsoft.Json.JsonProperty("listitemid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Listitemid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("listid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Listid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("editable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Editable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemorder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Itemorder { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Statusid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ListItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItem>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NewListItemParams 
    {
        [Newtonsoft.Json.JsonProperty("listid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Listid { get; set; }
    
        /// <summary>The array of list item values</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Values { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static NewListItemParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewListItemParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateListItemParams 
    {
        [Newtonsoft.Json.JsonProperty("listitemid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Listitemid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("editable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Editable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Statusid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UpdateListItemParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateListItemParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReorderListItemParams 
    {
        [Newtonsoft.Json.JsonProperty("listid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Listid { get; set; }
    
        /// <summary>The array of list item values</summary>
        [Newtonsoft.Json.JsonProperty("listitems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ListItem> Listitems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ReorderListItemParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReorderListItemParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ListItemSearch 
    {
        [Newtonsoft.Json.JsonProperty("listitemid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Listitemid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("listitemtext", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Listitemtext { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Statusid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("listid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Listid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("productids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Productids { get; set; }
    
        [Newtonsoft.Json.JsonProperty("listtext", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Listtext { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ListItemSearch FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemSearch>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class List 
    {
        [Newtonsoft.Json.JsonProperty("listid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Listid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("orderable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Orderable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("editable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Editable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Statusid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemsorderable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Itemsorderable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemseditable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Itemseditable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("productlist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Productlist { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static List FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<List>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateListParams 
    {
        [Newtonsoft.Json.JsonProperty("listid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Listid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("orderable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Orderable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("editable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Editable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Statusid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemseditable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Itemseditable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("addproductlist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Addproductlist { get; set; }
    
        [Newtonsoft.Json.JsonProperty("removeproductlist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Removeproductlist { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UpdateListParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateListParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ListSearch 
    {
        [Newtonsoft.Json.JsonProperty("listid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Listid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("listtext", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Listtext { get; set; }
    
        [Newtonsoft.Json.JsonProperty("productids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Productids { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Statusid { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ListSearch FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListSearch>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LocationListAvailability 
    {
        /// <summary>The array of location identifiers</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Location { get; set; }
    
        /// <summary>The array of location group identifiers</summary>
        [Newtonsoft.Json.JsonProperty("locationGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> LocationGroup { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static LocationListAvailability FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LocationListAvailability>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LocationListAvailabilityDetails 
    {
        /// <summary>The array statuses for locations</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, bool> Location { get; set; }
    
        /// <summary>The array statuses for location groups</summary>
        [Newtonsoft.Json.JsonProperty("locationGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, bool> LocationGroup { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static LocationListAvailabilityDetails FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LocationListAvailabilityDetails>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LookupRequest 
    {
        [Newtonsoft.Json.JsonProperty("context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConfigurationContext Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("filters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LookupFilterConfig> Filters { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static LookupRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LookupRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LookupItem 
    {
        /// <summary>The unique id of the lookup item.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        /// <summary>The optional parent id of the lookup item.</summary>
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentId { get; set; }
    
        /// <summary>The display value of the lookup item.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }
    
        /// <summary>The optional secondary display value of the lookup item.</summary>
        [Newtonsoft.Json.JsonProperty("secondaryValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecondaryValue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static LookupItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LookupItem>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LookupResponse : ResponseList
    {
        [Newtonsoft.Json.JsonProperty("records", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LookupItem> Records { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static LookupResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LookupResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LookupLocationsResponse : ResponseList
    {
        [Newtonsoft.Json.JsonProperty("records", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LocationLookupItem> Records { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static LookupLocationsResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LookupLocationsResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CategoryRepositoryAdapterFilters 
    {
        /// <summary>Filter to optionally include categories of a specific configuration product.</summary>
        [Newtonsoft.Json.JsonProperty("configurationProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ConfigurationProductId { get; set; }
    
        /// <summary>Filter to optionally include a specific category.</summary>
        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CategoryId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CategoryRepositoryAdapterFilters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CategoryRepositoryAdapterFilters>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContractorRepositoryAdapterFilters 
    {
        /// <summary>The unique id of the contrator to optionally filter by.</summary>
        [Newtonsoft.Json.JsonProperty("contractorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContractorId { get; set; }
    
        /// <summary>The status to optionally filter by.</summary>
        [Newtonsoft.Json.JsonProperty("statusId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StatusId { get; set; }
    
        /// <summary>The list of contrator types to optionally filter by.</summary>
        [Newtonsoft.Json.JsonProperty("types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Types { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ContractorRepositoryAdapterFilters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContractorRepositoryAdapterFilters>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CountryRepositoryAdapterFilters 
    {
        /// <summary>Temporary property to make CountryRepositoryAdapterFilters type</summary>
        [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CountryId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CountryRepositoryAdapterFilters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CountryRepositoryAdapterFilters>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CountryDivisionRepositoryAdapterFilters 
    {
        /// <summary>The unique identifier of the parent country.</summary>
        [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CountryId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CountryDivisionRepositoryAdapterFilters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CountryDivisionRepositoryAdapterFilters>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CurrencyRepositoryAdapterFilters 
    {
        /// <summary>Filter to optionally include only the default currency</summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefault { get; set; }
    
        /// <summary>The list of ids of currencies to optionally include.</summary>
        [Newtonsoft.Json.JsonProperty("includeCurrencyIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> IncludeCurrencyIds { get; set; }
    
        /// <summary>The list of ids of currencies to optionally exclude.</summary>
        [Newtonsoft.Json.JsonProperty("excludeCurrencyIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> ExcludeCurrencyIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CurrencyRepositoryAdapterFilters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CurrencyRepositoryAdapterFilters>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GenderRepositoryAdapterFilters 
    {
        /// <summary>Temporary property to make GenderRepositoryAdapterFilters type</summary>
        [Newtonsoft.Json.JsonProperty("genderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GenderId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static GenderRepositoryAdapterFilters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GenderRepositoryAdapterFilters>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ListItemRepositoryAdapterFilters 
    {
        /// <summary>The list id to optionally filter by.</summary>
        [Newtonsoft.Json.JsonProperty("listId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ListId { get; set; }
    
        /// <summary>The location id to optionally filter by.</summary>
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LocationId { get; set; }
    
        /// <summary>The list of ids of list items to optionally include.</summary>
        [Newtonsoft.Json.JsonProperty("includeListItemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> IncludeListItemIds { get; set; }
    
        /// <summary>The list of ids of list items to optionally exclude.</summary>
        [Newtonsoft.Json.JsonProperty("excludeListItemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> ExcludeListItemIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ListItemRepositoryAdapterFilters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemRepositoryAdapterFilters>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LocationRepositoryAdapterFilters 
    {
        /// <summary>The unique id for the location within its type.</summary>
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LocationId { get; set; }
    
        /// <summary>The id of the hierarchy to optionally limit locations to.</summary>
        [Newtonsoft.Json.JsonProperty("hierarchyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HierarchyId { get; set; }
    
        /// <summary>The id of the parent location group to optionally filter by.</summary>
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("locationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocationType? LocationType { get; set; }
    
        /// <summary>The list of location statuses to optionally filter by.</summary>
        [Newtonsoft.Json.JsonProperty("locationStatuses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> LocationStatuses { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static LocationRepositoryAdapterFilters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LocationRepositoryAdapterFilters>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PersonRelationshipTypeRepositoryAdapterFilters 
    {
        /// <summary>The list of ids of person relationship types to optionally include.</summary>
        [Newtonsoft.Json.JsonProperty("includePersonRelationshipTypeIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> IncludePersonRelationshipTypeIds { get; set; }
    
        /// <summary>The list of ids of person relationship types to optionally exclude.</summary>
        [Newtonsoft.Json.JsonProperty("excludePersonRelationshipTypeIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> ExcludePersonRelationshipTypeIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PersonRelationshipTypeRepositoryAdapterFilters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PersonRelationshipTypeRepositoryAdapterFilters>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PersonRepositoryAdapterFilters 
    {
        /// <summary>The id of the person optionally filter by.</summary>
        [Newtonsoft.Json.JsonProperty("personId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PersonId { get; set; }
    
        /// <summary>The id of the person to optional filter to the people report to them.</summary>
        [Newtonsoft.Json.JsonProperty("reportsTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReportsTo { get; set; }
    
        /// <summary>The id of the person to optional filter to the person who supervises them.</summary>
        [Newtonsoft.Json.JsonProperty("supervises", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Supervises { get; set; }
    
        /// <summary>Optionally filter by whether the person has login access.</summary>
        [Newtonsoft.Json.JsonProperty("hasLoginAccess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasLoginAccess { get; set; }
    
        /// <summary>Optionally filter to people who are members of a specific group.</summary>
        [Newtonsoft.Json.JsonProperty("memberOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MemberOf { get; set; }
    
        /// <summary>The id of the location to optional filter to people who have that location set.</summary>
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LocationId { get; set; }
    
        /// <summary>The id of the relationship type to optionally filter people by.</summary>
        [Newtonsoft.Json.JsonProperty("relationshipTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RelationshipTypeId { get; set; }
    
        /// <summary>The list of person statuses to optionally filter by.</summary>
        [Newtonsoft.Json.JsonProperty("personStatuses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> PersonStatuses { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PersonRepositoryAdapterFilters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PersonRepositoryAdapterFilters>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RoleRepositoryAdapterFilters 
    {
        /// <summary>The specific role to filter by.</summary>
        [Newtonsoft.Json.JsonProperty("roleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RoleId { get; set; }
    
        /// <summary>The unique id of the role type to optionally filter by.</summary>
        [Newtonsoft.Json.JsonProperty("roleTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RoleTypeId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static RoleRepositoryAdapterFilters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RoleRepositoryAdapterFilters>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StateRepositoryAdapterFilters 
    {
        /// <summary>Filter to optionally include state of a specific configuration product.</summary>
        [Newtonsoft.Json.JsonProperty("configurationProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ConfigurationProductId { get; set; }
    
        /// <summary>Filter to optionally include states of a specific category.</summary>
        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CategoryId { get; set; }
    
        /// <summary>Filter to optionally include a specific state.</summary>
        [Newtonsoft.Json.JsonProperty("stateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StateId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static StateRepositoryAdapterFilters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StateRepositoryAdapterFilters>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UnitRepositoryAdapterFilters 
    {
        /// <summary>The id of the unit system to optionally filter by.</summary>
        [Newtonsoft.Json.JsonProperty("unitSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UnitSystem { get; set; }
    
        /// <summary>The list of ids of unit types to optionally include.</summary>
        [Newtonsoft.Json.JsonProperty("unitTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> UnitTypes { get; set; }
    
        /// <summary>Filter to optionally include only base units.</summary>
        [Newtonsoft.Json.JsonProperty("isBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsBase { get; set; }
    
        /// <summary>The scale of the units to optionally filter by.</summary>
        [Newtonsoft.Json.JsonProperty("unitScale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitScale { get; set; }
    
        /// <summary>The list of ids of units to optionally include.</summary>
        [Newtonsoft.Json.JsonProperty("includeUnitIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> IncludeUnitIds { get; set; }
    
        /// <summary>The list of ids of units to optionally exclude.</summary>
        [Newtonsoft.Json.JsonProperty("excludeUnitIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> ExcludeUnitIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UnitRepositoryAdapterFilters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnitRepositoryAdapterFilters>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LocationLookupItem 
    {
        /// <summary>The hierarchy the location is represented in.</summary>
        [Newtonsoft.Json.JsonProperty("hierarchyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HierarchyId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("locationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocationType LocationType { get; set; }
    
        /// <summary>The unique id of the location for the type.</summary>
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LocationId { get; set; }
    
        /// <summary>The unique id of the parent location group.</summary>
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ParentId { get; set; }
    
        /// <summary>The display name of the location.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The path for the location with in the hierarchy.</summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static LocationLookupItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LocationLookupItem>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ListExclusion 
    {
        [Newtonsoft.Json.JsonProperty("ListExclusionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ListExclusionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ListId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ListId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LocationGroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LocationGroupId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LocationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LocationId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ListExclusion FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListExclusion>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ListItemExclusion 
    {
        [Newtonsoft.Json.JsonProperty("ListItemExclusionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ListItemExclusionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ListItemId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ListItemId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LocationGroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LocationGroupId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LocationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LocationId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ListItemExclusion FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemExclusion>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MobileReponsibilities 
    {
        [Newtonsoft.Json.JsonProperty("ProductResponsibilities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductResponsibilities> ProductResponsibilities { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static MobileReponsibilities FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MobileReponsibilities>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProductResponsibilities 
    {
        [Newtonsoft.Json.JsonProperty("ConfigurationProductId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ConfigurationProductId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RecordIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> RecordIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ProductResponsibilities FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductResponsibilities>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NotificationRule 
    {
        [Newtonsoft.Json.JsonProperty("notificationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NotificationId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deliveryMethodId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DeliveryMethodId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sendToAllEmployees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SendToAllEmployees { get; set; }
    
        [Newtonsoft.Json.JsonProperty("daysValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DaysValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EffectiveDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicability", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Applicability Applicability { get; set; }
    
        [Newtonsoft.Json.JsonProperty("recipients", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Recipients Recipients { get; set; }
    
        [Newtonsoft.Json.JsonProperty("filterCriteria", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterCriteria FilterCriteria { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static NotificationRule FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationRule>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NotificationRules 
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NotificationRule> Items { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static NotificationRules FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationRules>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Person 
    {
        [Newtonsoft.Json.JsonProperty("personId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PersonId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("locations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Locations { get; set; }
    
        [Newtonsoft.Json.JsonProperty("locationNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> LocationNames { get; set; }
    
        [Newtonsoft.Json.JsonProperty("loginAccessRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LoginAccessRequired { get; set; }
    
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StatusId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("genderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GenderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gender { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateOfBirth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mobileNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MobileNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryDivisionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CountryDivisionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryDivisionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryDivisionName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CountryId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CountryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("languageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LanguageId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("relationshipTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RelationshipTypeId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("relationshipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelationshipType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("currentPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("supervisorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SupervisorId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("supervisorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupervisorName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hireDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? HireDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("currentpositionStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CurrentpositionStartDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("employeeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmployeeId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contractingCompanyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContractingCompanyId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contractingCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractingCompanyName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("locked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Locked { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContactTypeId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactTypeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpiryDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdByPersonId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CreatedByPersonId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("personDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonDetails { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Person FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Person>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PersonsResponse : ResponseList
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Person> Items { get; set; } = new System.Collections.ObjectModel.Collection<Person>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PersonsResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PersonsResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdatePersonParams 
    {
        [Newtonsoft.Json.JsonProperty("personId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PersonId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updatedByPersonId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UpdatedByPersonId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StatusId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("loginAccessRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LoginAccessRequired { get; set; }
    
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }
    
        [Newtonsoft.Json.JsonProperty("addLocations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> AddLocations { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deleteLocations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> DeleteLocations { get; set; }
    
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("genderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GenderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateOfBirth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mobileNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MobileNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryDivisionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CountryDivisionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CountryId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("relationshipTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RelationshipTypeId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("currentPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("supervisorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SupervisorId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hireDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? HireDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("currentpositionStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CurrentpositionStartDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("employeeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmployeeId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contractingCompanyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContractingCompanyId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContactTypeId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("locked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Locked { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpiryDate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UpdatePersonParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatePersonParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PersonValidationRuleSet
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Personal")]
        Personal = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Employment")]
        Employment = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Login")]
        Login = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BaseContractingCompany 
    {
        /// <summary>The unique identifier for the contracting company</summary>
        [Newtonsoft.Json.JsonProperty("contractingCompanyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContractingCompanyId { get; set; }
    
        /// <summary>The display name of the company</summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }
    
        /// <summary>The description of the company</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The company's status in the system</summary>
        [Newtonsoft.Json.JsonProperty("statusId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StatusId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryDivisionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CountryDivisionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CountryId { get; set; }
    
        /// <summary>The zip code portion of the companys address</summary>
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZipCode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BaseContractingCompany FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseContractingCompany>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContractingCompany : BaseContractingCompany
    {
        /// <summary>The list of company's type</summary>
        [Newtonsoft.Json.JsonProperty("contractorTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> ContractorTypes { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ContractingCompany FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContractingCompany>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateContractingCompanyParams : BaseContractingCompany
    {
        /// <summary>The list of company's type to add</summary>
        [Newtonsoft.Json.JsonProperty("addContractorTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> AddContractorTypes { get; set; }
    
        /// <summary>The list of company's type to remove</summary>
        [Newtonsoft.Json.JsonProperty("deleteContractorTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> DeleteContractorTypes { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UpdateContractingCompanyParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateContractingCompanyParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContractingCompaniesResponse : ResponseList
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContractingCompany> Items { get; set; } = new System.Collections.ObjectModel.Collection<ContractingCompany>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ContractingCompaniesResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContractingCompaniesResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConfigurationContext 
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Data { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ConfigurationContext FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfigurationContext>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ArchivedRecord 
    {
        /// <summary>The unique id of the archived record.</summary>
        [Newtonsoft.Json.JsonProperty("recordArchiveID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RecordArchiveID { get; set; }
    
        /// <summary>The parent of the archived record.</summary>
        [Newtonsoft.Json.JsonProperty("parentRecordArchiveId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentRecordArchiveId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Value Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ArchivedRecord FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ArchivedRecord>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ArchivedRecordSearchParams 
    {
        /// <summary>The parent of the record archive ID.</summary>
        [Newtonsoft.Json.JsonProperty("parentRecordArchiveId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentRecordArchiveId { get; set; }
    
        /// <summary>Filter to only include records created after the provided date.</summary>
        [Newtonsoft.Json.JsonProperty("startDateCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDateCreated { get; set; }
    
        /// <summary>Filter to only include records created prior to the provided date.</summary>
        [Newtonsoft.Json.JsonProperty("endDateCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDateCreated { get; set; }
    
        /// <summary>Filter to only include records deleted after the provided date.</summary>
        [Newtonsoft.Json.JsonProperty("startDateDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDateDeleted { get; set; }
    
        /// <summary>Filter to only include records deleted prior to the provided date.</summary>
        [Newtonsoft.Json.JsonProperty("endDateDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDateDeleted { get; set; }
    
        /// <summary>The list of categories to include deleted records from.</summary>
        [Newtonsoft.Json.JsonProperty("categoryFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> CategoryFilters { get; set; }
    
        /// <summary>The list of locations to include deleted records from.</summary>
        [Newtonsoft.Json.JsonProperty("locationFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> LocationFilters { get; set; }
    
        /// <summary>Limit the results to only those deleted by this person.</summary>
        [Newtonsoft.Json.JsonProperty("deletedById", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DeletedById { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ArchivedRecordSearchParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ArchivedRecordSearchParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ArchivedRecordIds 
    {
        /// <summary>The unique id of the archived record to modify.</summary>
        [Newtonsoft.Json.JsonProperty("recordArchiveId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RecordArchiveId { get; set; }
    
        /// <summary>The unique id of the child archived record to modify.</summary>
        [Newtonsoft.Json.JsonProperty("childRecordArchiveIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> ChildRecordArchiveIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ArchivedRecordIds FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ArchivedRecordIds>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateArchivedRecords : System.Collections.ObjectModel.Collection<ArchivedRecordIds>
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UpdateArchivedRecords FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateArchivedRecords>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ArchivedRecordResponse : ResponseList
    {
        [Newtonsoft.Json.JsonProperty("records", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ArchivedRecord> Records { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ArchivedRecordResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ArchivedRecordResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DeliveryMethod
    {
        [System.Runtime.Serialization.EnumMember(Value = @"email")]
        Email = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"phone")]
        Phone = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum FormsAuthPasswordChangeRequestDeliveryMethod
    {
        [System.Runtime.Serialization.EnumMember(Value = @"email")]
        Email = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"phone")]
        Phone = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Applicability 
    {
        [Newtonsoft.Json.JsonProperty("heirarchyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HeirarchyId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("locations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Locations { get; set; }
    
        [Newtonsoft.Json.JsonProperty("locationGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> LocationGroups { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Applicability FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Applicability>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Recipients 
    {
        [Newtonsoft.Json.JsonProperty("persons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Persons { get; set; }
    
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Roles { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Recipients FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Recipients>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FilterCriteria 
    {
        [Newtonsoft.Json.JsonProperty("expression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expression { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FilterCriteria FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterCriteria>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Value 
    {
        /// <summary>The name of the category the record belongs to.</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }
    
        /// <summary>The title of the record.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>The delimited list of locations the record exists at.</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }
    
        /// <summary>The date the record was originally created.</summary>
        [Newtonsoft.Json.JsonProperty("dateCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateCreated { get; set; }
    
        /// <summary>The date the record was last deleted.</summary>
        [Newtonsoft.Json.JsonProperty("dateDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateDeleted { get; set; }
    
        /// <summary>The id of the person that deleted the record.</summary>
        [Newtonsoft.Json.JsonProperty("personDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonDeleted { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Value FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Value>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.4.0 (NJsonSchema v9.13.36.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.4.0 (NJsonSchema v9.13.36.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

    #pragma warning restore
}