//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.2.4.0 (NJsonSchema v9.13.36.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace VelocityEhs.Service.InternalApi.Ehs.InstanceApi.Controllers
{
    #pragma warning disable

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.4.0 (NJsonSchema v9.13.36.0 (Newtonsoft.Json v11.0.0.0))")]
    public interface IHierarchyController
    {
        /// <summary>Return a list all Hierarchies</summary>
        /// <response code="200">A list of Hierarchies</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Hierarchies not found</response>
        /// <returns>A list of Hierarchies</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<Hierarchy>>> GetHierarchiesAsync();
    
        /// <summary>Update existing Hierarchy</summary>
        /// <param name="body">The updated Hierarchy object</param>
        /// <response code="204">The hierarchy was successfully updated.</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Hierarchy not found</response>
        /// <returns>The hierarchy was successfully updated.</returns>
        System.Threading.Tasks.Task UpdateHierarchyAsync(UpdateHierarchyParams body);
    
        /// <summary>Create new Hierarchy</summary>
        /// <param name="body">The new Hierarchy schema</param>
        /// <response code="201">The new hierarchy identifier</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <returns>The new hierarchy identifier</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreateHierarchyAsync(NewHierarchyParams body);
    
        /// <summary>Get a Hierarchy by id</summary>
        /// <param name="hierarchyId">The Hierarchy identifier</param>
        /// <response code="200">A Hierarchy by id</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Hierarchy not found</response>
        /// <returns>A Hierarchy by id</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Hierarchy>> GetHierarchyAsync(int? hierarchyId);
    
        /// <summary>Delete a Hierarchy by Hierarchy id</summary>
        /// <param name="hierarchyId">The Hierarchy identifier</param>
        /// <response code="204">Delete Hierarchy result</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Hierarchy not found</response>
        /// <returns>Delete Hierarchy result</returns>
        System.Threading.Tasks.Task DeleteHierarchyAsync(int? hierarchyId);
    
        /// <summary>Hierarchy creation validation</summary>
        /// <param name="body">The new Hierarchy object</param>
        /// <response code="200">Create Hierarchy validation result</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Hierarchy not found</response>
        /// <returns>Create Hierarchy validation result</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<bool>> CanCreateHierarchyAsync(NewHierarchyParams body);
    
        /// <summary>Hierarchy update validation</summary>
        /// <param name="body">The updated Hierarchy object</param>
        /// <response code="200">Update Hierarchy validation result</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Hierarchy not found</response>
        /// <returns>Update Hierarchy validation result</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<bool>> CanUpdateHierarchyAsync(UpdateHierarchyParams body);
    
        /// <summary>Hierarchy deletion validation</summary>
        /// <param name="hierarchyId">The hierarchy identifier</param>
        /// <response code="200">Delete Hierarchy validation result</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Hierarchy not found</response>
        /// <returns>Delete Hierarchy validation result</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<bool>> CanDeleteHierarchyAsync(int? hierarchyId);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.4.0 (NJsonSchema v9.13.36.0 (Newtonsoft.Json v11.0.0.0))")]
    [Microsoft.AspNetCore.Mvc.Route("api")]
    public partial class HierarchyController : Microsoft.AspNetCore.Mvc.Controller
    {
        private IHierarchyController implementation;
    
        public HierarchyController(IHierarchyController implementation)
        {
            this.implementation = implementation;
        }
    
        /// <summary>Return a list all Hierarchies</summary>
        /// <response code="200">A list of Hierarchies</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Hierarchies not found</response>
        /// <returns>A list of Hierarchies</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("hierarchies")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<Hierarchy>>> GetHierarchies()
        {
            return this.implementation.GetHierarchiesAsync();
        }
    
        /// <summary>Update existing Hierarchy</summary>
        /// <param name="body">The updated Hierarchy object</param>
        /// <response code="204">The hierarchy was successfully updated.</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Hierarchy not found</response>
        /// <returns>The hierarchy was successfully updated.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("hierarchies")]
            public System.Threading.Tasks.Task UpdateHierarchy([Microsoft.AspNetCore.Mvc.FromBody] UpdateHierarchyParams body)
        {
            return this.implementation.UpdateHierarchyAsync(body);
        }
    
        /// <summary>Create new Hierarchy</summary>
        /// <param name="body">The new Hierarchy schema</param>
        /// <response code="201">The new hierarchy identifier</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <returns>The new hierarchy identifier</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("hierarchies")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreateHierarchy([Microsoft.AspNetCore.Mvc.FromBody] NewHierarchyParams body)
        {
            return this.implementation.CreateHierarchyAsync(body);
        }
    
        /// <summary>Get a Hierarchy by id</summary>
        /// <param name="hierarchyId">The Hierarchy identifier</param>
        /// <response code="200">A Hierarchy by id</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Hierarchy not found</response>
        /// <returns>A Hierarchy by id</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("hierarchies/{hierarchyId}")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Hierarchy>> GetHierarchy(int? hierarchyId)
        {
            return this.implementation.GetHierarchyAsync(hierarchyId);
        }
    
        /// <summary>Delete a Hierarchy by Hierarchy id</summary>
        /// <param name="hierarchyId">The Hierarchy identifier</param>
        /// <response code="204">Delete Hierarchy result</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Hierarchy not found</response>
        /// <returns>Delete Hierarchy result</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("hierarchies/{hierarchyId}")]
            public System.Threading.Tasks.Task DeleteHierarchy(int? hierarchyId)
        {
            return this.implementation.DeleteHierarchyAsync(hierarchyId);
        }
    
        /// <summary>Hierarchy creation validation</summary>
        /// <param name="body">The new Hierarchy object</param>
        /// <response code="200">Create Hierarchy validation result</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Hierarchy not found</response>
        /// <returns>Create Hierarchy validation result</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("hierarchies/createValidate")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<bool>> CanCreateHierarchy([Microsoft.AspNetCore.Mvc.FromBody] NewHierarchyParams body)
        {
            return this.implementation.CanCreateHierarchyAsync(body);
        }
    
        /// <summary>Hierarchy update validation</summary>
        /// <param name="body">The updated Hierarchy object</param>
        /// <response code="200">Update Hierarchy validation result</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Hierarchy not found</response>
        /// <returns>Update Hierarchy validation result</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("hierarchies/updateValidate")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<bool>> CanUpdateHierarchy([Microsoft.AspNetCore.Mvc.FromBody] UpdateHierarchyParams body)
        {
            return this.implementation.CanUpdateHierarchyAsync(body);
        }
    
        /// <summary>Hierarchy deletion validation</summary>
        /// <param name="hierarchyId">The hierarchy identifier</param>
        /// <response code="200">Delete Hierarchy validation result</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Hierarchy not found</response>
        /// <returns>Delete Hierarchy validation result</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("hierarchies/deleteValidate")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<bool>> CanDeleteHierarchy(int? hierarchyId)
        {
            return this.implementation.CanDeleteHierarchyAsync(hierarchyId);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.4.0 (NJsonSchema v9.13.36.0 (Newtonsoft.Json v11.0.0.0))")]
    public interface ILocationController
    {
        /// <summary>Search for locations by params</summary>
        /// <param name="id">The location identifier</param>
        /// <param name="locationType">The location type will be among Group = 0, Location = 1</param>
        /// <param name="hierarchyId">The hierarchy identifier</param>
        /// <param name="locationStatuses">The array of selected status unique identifier will be among Active = 0, Inactive = 1, Archived = 2</param>
        /// <param name="limit">The amount of locations return per request</param>
        /// <param name="offset">The position for first location to be returned in the collection</param>
        /// <response code="200">A list of locations founded using provided criteria</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Locations not found</response>
        /// <returns>A list of locations founded using provided criteria</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<Location>>> GetLocationsAsync(int? id, int? locationType, int? hierarchyId, System.Collections.Generic.IEnumerable<int> locationStatuses, int? limit, int? offset);
    
        /// <summary>Update existing location</summary>
        /// <param name="body">The updated location schema</param>
        /// <response code="204">The location was successfully updated.</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location not found</response>
        /// <returns>The location was successfully updated.</returns>
        System.Threading.Tasks.Task UpdateLocationAsync(Location body);
    
        /// <summary>Create new location</summary>
        /// <param name="body">The new location schema</param>
        /// <response code="201">The new location identifier</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <returns>The new location identifier</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreateLocationAsync(NewLocationParams body);
    
        /// <summary>Delete a location by location id</summary>
        /// <param name="id">The location identifier</param>
        /// <param name="locationType">The location type will be among Group = 0, Location = 1</param>
        /// <response code="204">Location deletion result</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location not found</response>
        /// <returns>Location deletion result</returns>
        System.Threading.Tasks.Task DeleteLocationAsync(int id, int locationType);
    
        /// <summary>Get a location by location id</summary>
        /// <param name="locationId">The location identifier</param>
        /// <param name="locationType">Location type of selected location. Group = 0, Location = 1</param>
        /// <response code="200">A location with provided identifier</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location not found</response>
        /// <returns>A location with provided identifier</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Location>> GetLocationByIdAsync(int locationId, int? locationType);
    
        /// <summary>Get locations by traverse the location tree</summary>
        /// <param name="id">The location identifier</param>
        /// <param name="locationType">The location type will be among Group = 0, Location = 1</param>
        /// <param name="hierarchyId">The hierarchy identifier</param>
        /// <param name="locationStatuses">The array of selected statuses</param>
        /// <param name="levels">The number of level to traverse within hierarchy</param>
        /// <response code="200">A list of locations founded using provided criteria</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Locations not found</response>
        /// <returns>A list of locations founded using provided criteria</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<Location>>> GetTraversedLocationsAsync(int id, int locationType, int hierarchyId, System.Collections.Generic.IEnumerable<int> locationStatuses, int? levels);
    
        /// <summary>Move location and all children under another location group</summary>
        /// <response code="204">The location successfully moved.</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location not found</response>
        /// <returns>The location successfully moved.</returns>
        System.Threading.Tasks.Task MoveLocationAsync(MovingLocationParams body);
    
        /// <summary>Validation of location creation</summary>
        /// <param name="body">The new location object</param>
        /// <response code="200">Create location validation result</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location not found</response>
        /// <returns>Create location validation result</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<bool>> CanCreateLocationAsync(NewLocationParams body);
    
        /// <summary>Validation of location deleting</summary>
        /// <param name="id">The location identifier</param>
        /// <param name="locationType">The location type will be among Group = 0, Location = 1</param>
        /// <response code="200">Delete location validation result</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location not found</response>
        /// <returns>Delete location validation result</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<bool>> CanDeleteLocationAsync(int id, int locationType);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.4.0 (NJsonSchema v9.13.36.0 (Newtonsoft.Json v11.0.0.0))")]
    [Microsoft.AspNetCore.Mvc.Route("api")]
    public partial class LocationController : Microsoft.AspNetCore.Mvc.Controller
    {
        private ILocationController implementation;
    
        public LocationController(ILocationController implementation)
        {
            this.implementation = implementation;
        }
    
        /// <summary>Search for locations by params</summary>
        /// <param name="id">The location identifier</param>
        /// <param name="locationType">The location type will be among Group = 0, Location = 1</param>
        /// <param name="hierarchyId">The hierarchy identifier</param>
        /// <param name="locationStatuses">The array of selected status unique identifier will be among Active = 0, Inactive = 1, Archived = 2</param>
        /// <param name="limit">The amount of locations return per request</param>
        /// <param name="offset">The position for first location to be returned in the collection</param>
        /// <response code="200">A list of locations founded using provided criteria</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Locations not found</response>
        /// <returns>A list of locations founded using provided criteria</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("locations")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<Location>>> GetLocations(int? id, int? locationType, int? hierarchyId, System.Collections.Generic.IEnumerable<int> locationStatuses, int? limit, int? offset)
        {
            return this.implementation.GetLocationsAsync(id, locationType, hierarchyId, locationStatuses, limit, offset);
        }
    
        /// <summary>Update existing location</summary>
        /// <param name="body">The updated location schema</param>
        /// <response code="204">The location was successfully updated.</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location not found</response>
        /// <returns>The location was successfully updated.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("locations")]
            public System.Threading.Tasks.Task UpdateLocation([Microsoft.AspNetCore.Mvc.FromBody] Location body)
        {
            return this.implementation.UpdateLocationAsync(body);
        }
    
        /// <summary>Create new location</summary>
        /// <param name="body">The new location schema</param>
        /// <response code="201">The new location identifier</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <returns>The new location identifier</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("locations")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreateLocation([Microsoft.AspNetCore.Mvc.FromBody] NewLocationParams body)
        {
            return this.implementation.CreateLocationAsync(body);
        }
    
        /// <summary>Delete a location by location id</summary>
        /// <param name="id">The location identifier</param>
        /// <param name="locationType">The location type will be among Group = 0, Location = 1</param>
        /// <response code="204">Location deletion result</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location not found</response>
        /// <returns>Location deletion result</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("locations")]
            public System.Threading.Tasks.Task DeleteLocation(int id, int locationType)
        {
            return this.implementation.DeleteLocationAsync(id, locationType);
        }
    
        /// <summary>Get a location by location id</summary>
        /// <param name="locationId">The location identifier</param>
        /// <param name="locationType">Location type of selected location. Group = 0, Location = 1</param>
        /// <response code="200">A location with provided identifier</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location not found</response>
        /// <returns>A location with provided identifier</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("locations/{locationId}")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Location>> GetLocationById(int locationId, int? locationType)
        {
            return this.implementation.GetLocationByIdAsync(locationId, locationType);
        }
    
        /// <summary>Get locations by traverse the location tree</summary>
        /// <param name="id">The location identifier</param>
        /// <param name="locationType">The location type will be among Group = 0, Location = 1</param>
        /// <param name="hierarchyId">The hierarchy identifier</param>
        /// <param name="locationStatuses">The array of selected statuses</param>
        /// <param name="levels">The number of level to traverse within hierarchy</param>
        /// <response code="200">A list of locations founded using provided criteria</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Locations not found</response>
        /// <returns>A list of locations founded using provided criteria</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("locations/traverse")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<Location>>> GetTraversedLocations(int id, int locationType, int hierarchyId, System.Collections.Generic.IEnumerable<int> locationStatuses, int? levels)
        {
            return this.implementation.GetTraversedLocationsAsync(id, locationType, hierarchyId, locationStatuses, levels);
        }
    
        /// <summary>Move location and all children under another location group</summary>
        /// <response code="204">The location successfully moved.</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location not found</response>
        /// <returns>The location successfully moved.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("locations/move")]
            public System.Threading.Tasks.Task MoveLocation([Microsoft.AspNetCore.Mvc.FromBody] MovingLocationParams body)
        {
            return this.implementation.MoveLocationAsync(body);
        }
    
        /// <summary>Validation of location creation</summary>
        /// <param name="body">The new location object</param>
        /// <response code="200">Create location validation result</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location not found</response>
        /// <returns>Create location validation result</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("locations/creationValidate")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<bool>> CanCreateLocation([Microsoft.AspNetCore.Mvc.FromBody] NewLocationParams body)
        {
            return this.implementation.CanCreateLocationAsync(body);
        }
    
        /// <summary>Validation of location deleting</summary>
        /// <param name="id">The location identifier</param>
        /// <param name="locationType">The location type will be among Group = 0, Location = 1</param>
        /// <response code="200">Delete location validation result</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location not found</response>
        /// <returns>Delete location validation result</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("locations/deletionValidate")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<bool>> CanDeleteLocation(int id, int locationType)
        {
            return this.implementation.CanDeleteLocationAsync(id, locationType);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.4.0 (NJsonSchema v9.13.36.0 (Newtonsoft.Json v11.0.0.0))")]
    public interface IListController
    {
        /// <summary>Search for lists based on params</summary>
        /// <param name="statusFilters">The array of selected statuses to include</param>
        /// <response code="200">A list of lists found using provided criteria</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Lists not found</response>
        /// <returns>A list of lists found using provided criteria</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<List>>> GetListsAsync(System.Collections.Generic.IEnumerable<int> statusFilters);
    
        /// <summary>Update existing list</summary>
        /// <param name="body">The updated list schema</param>
        /// <response code="204">The list was successfully updated.</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">List not found</response>
        /// <returns>The list was successfully updated.</returns>
        System.Threading.Tasks.Task UpdateListAsync(List body);
    
        /// <summary>Create new list</summary>
        /// <param name="body">The list schema</param>
        /// <response code="201">The new list identifier</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <returns>The new list identifier</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreateListAsync(List body);
    
        /// <summary>Delete a list by list id</summary>
        /// <param name="listId">The list identifier</param>
        /// <response code="204">List deletion result</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">List not found</response>
        /// <returns>List deletion result</returns>
        System.Threading.Tasks.Task DeleteListAsync(int listId);
    
        /// <summary>Get a list by list id</summary>
        /// <param name="listId">The list to be returned</param>
        /// <param name="statusFilters">The array of selected statuses to include</param>
        /// <response code="200">A list with provided identifier</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">List not found</response>
        /// <returns>A list with provided identifier</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<List>> GetListByIdAsync(int listId, System.Collections.Generic.IEnumerable<int> statusFilters);
    
        /// <summary>Search for list items based on params</summary>
        /// <param name="listId">The list the list items retrieved belong to (null will return all lists)</param>
        /// <param name="listStatusFilters">The array of selected statuses of lists to include</param>
        /// <param name="listItemStatusFilters">The array of selected statuses list items to include</param>
        /// <response code="200">A list of list items found using provided criteria</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">List item not found</response>
        /// <returns>A list of list items found using provided criteria</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<ListItem>>> GetListItemsAsync(int? listId, System.Collections.Generic.IEnumerable<int> listStatusFilters, System.Collections.Generic.IEnumerable<int> listItemStatusFilters);
    
        /// <summary>Update existing list item</summary>
        /// <param name="body">The updated list item schema</param>
        /// <response code="204">The list item was successfully updated</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">List Item not found</response>
        /// <returns>The list item was successfully updated</returns>
        System.Threading.Tasks.Task UpdateListItemAsync(UpdateListItemParams body);
    
        /// <summary>Create new list item</summary>
        /// <param name="body">The new list item schema</param>
        /// <response code="201">The new list item identifier</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <returns>The new list item identifier</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201MultipleResponses>> CreateListItemAsync(NewListItemParams body);
    
        /// <summary>Delete a list item by list item id</summary>
        /// <param name="listItemId">The list item identifier</param>
        /// <response code="204">List Item deletion result</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">List Item not found</response>
        /// <returns>List Item deletion result</returns>
        System.Threading.Tasks.Task DeleteListItemAsync(int listItemId);
    
        /// <summary>Get a list item by list item id</summary>
        /// <param name="listItemId">The list item to be returned</param>
        /// <param name="listStatusFilters">The array of selected statuses lists to include</param>
        /// <param name="listItemStatusFilters">The array of selected statuses list items to include</param>
        /// <response code="200">A list item with provided identifier</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">List Item not found</response>
        /// <returns>A list item with provided identifier</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<ListItem>> GetListItemByIdAsync(int listItemId, System.Collections.Generic.IEnumerable<int> listStatusFilters, System.Collections.Generic.IEnumerable<int> listItemStatusFilters);
    
        /// <summary>Reorders all list items in a list</summary>
        /// <param name="body">The reorder list item schema</param>
        /// <response code="204">The list item reorder was successfully updated</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">List Item not found</response>
        /// <returns>The list item reorder was successfully updated</returns>
        System.Threading.Tasks.Task ReorderListItemAsync(ReorderListItemParams body);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.4.0 (NJsonSchema v9.13.36.0 (Newtonsoft.Json v11.0.0.0))")]
    [Microsoft.AspNetCore.Mvc.Route("api")]
    public partial class ListController : Microsoft.AspNetCore.Mvc.Controller
    {
        private IListController implementation;
    
        public ListController(IListController implementation)
        {
            this.implementation = implementation;
        }
    
        /// <summary>Search for lists based on params</summary>
        /// <param name="statusFilters">The array of selected statuses to include</param>
        /// <response code="200">A list of lists found using provided criteria</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Lists not found</response>
        /// <returns>A list of lists found using provided criteria</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("lists")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<List>>> GetLists(System.Collections.Generic.IEnumerable<int> statusFilters)
        {
            return this.implementation.GetListsAsync(statusFilters);
        }
    
        /// <summary>Update existing list</summary>
        /// <param name="body">The updated list schema</param>
        /// <response code="204">The list was successfully updated.</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">List not found</response>
        /// <returns>The list was successfully updated.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("lists")]
            public System.Threading.Tasks.Task UpdateList([Microsoft.AspNetCore.Mvc.FromBody] List body)
        {
            return this.implementation.UpdateListAsync(body);
        }
    
        /// <summary>Create new list</summary>
        /// <param name="body">The list schema</param>
        /// <response code="201">The new list identifier</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <returns>The new list identifier</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("lists")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreateList([Microsoft.AspNetCore.Mvc.FromBody] List body)
        {
            return this.implementation.CreateListAsync(body);
        }
    
        /// <summary>Delete a list by list id</summary>
        /// <param name="listId">The list identifier</param>
        /// <response code="204">List deletion result</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">List not found</response>
        /// <returns>List deletion result</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("lists")]
            public System.Threading.Tasks.Task DeleteList(int listId)
        {
            return this.implementation.DeleteListAsync(listId);
        }
    
        /// <summary>Get a list by list id</summary>
        /// <param name="listId">The list to be returned</param>
        /// <param name="statusFilters">The array of selected statuses to include</param>
        /// <response code="200">A list with provided identifier</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">List not found</response>
        /// <returns>A list with provided identifier</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("lists/{listId}")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<List>> GetListById(int listId, System.Collections.Generic.IEnumerable<int> statusFilters)
        {
            return this.implementation.GetListByIdAsync(listId, statusFilters);
        }
    
        /// <summary>Search for list items based on params</summary>
        /// <param name="listId">The list the list items retrieved belong to (null will return all lists)</param>
        /// <param name="listStatusFilters">The array of selected statuses of lists to include</param>
        /// <param name="listItemStatusFilters">The array of selected statuses list items to include</param>
        /// <response code="200">A list of list items found using provided criteria</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">List item not found</response>
        /// <returns>A list of list items found using provided criteria</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("lists/items")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<ListItem>>> GetListItems(int? listId, System.Collections.Generic.IEnumerable<int> listStatusFilters, System.Collections.Generic.IEnumerable<int> listItemStatusFilters)
        {
            return this.implementation.GetListItemsAsync(listId, listStatusFilters, listItemStatusFilters);
        }
    
        /// <summary>Update existing list item</summary>
        /// <param name="body">The updated list item schema</param>
        /// <response code="204">The list item was successfully updated</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">List Item not found</response>
        /// <returns>The list item was successfully updated</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("lists/items")]
            public System.Threading.Tasks.Task UpdateListItem([Microsoft.AspNetCore.Mvc.FromBody] UpdateListItemParams body)
        {
            return this.implementation.UpdateListItemAsync(body);
        }
    
        /// <summary>Create new list item</summary>
        /// <param name="body">The new list item schema</param>
        /// <response code="201">The new list item identifier</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <returns>The new list item identifier</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("lists/items")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201MultipleResponses>> CreateListItem([Microsoft.AspNetCore.Mvc.FromBody] NewListItemParams body)
        {
            return this.implementation.CreateListItemAsync(body);
        }
    
        /// <summary>Delete a list item by list item id</summary>
        /// <param name="listItemId">The list item identifier</param>
        /// <response code="204">List Item deletion result</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">List Item not found</response>
        /// <returns>List Item deletion result</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("lists/items")]
            public System.Threading.Tasks.Task DeleteListItem(int listItemId)
        {
            return this.implementation.DeleteListItemAsync(listItemId);
        }
    
        /// <summary>Get a list item by list item id</summary>
        /// <param name="listItemId">The list item to be returned</param>
        /// <param name="listStatusFilters">The array of selected statuses lists to include</param>
        /// <param name="listItemStatusFilters">The array of selected statuses list items to include</param>
        /// <response code="200">A list item with provided identifier</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">List Item not found</response>
        /// <returns>A list item with provided identifier</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("lists/items/{listItemId}")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<ListItem>> GetListItemById(int listItemId, System.Collections.Generic.IEnumerable<int> listStatusFilters, System.Collections.Generic.IEnumerable<int> listItemStatusFilters)
        {
            return this.implementation.GetListItemByIdAsync(listItemId, listStatusFilters, listItemStatusFilters);
        }
    
        /// <summary>Reorders all list items in a list</summary>
        /// <param name="body">The reorder list item schema</param>
        /// <response code="204">The list item reorder was successfully updated</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">List Item not found</response>
        /// <returns>The list item reorder was successfully updated</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("lists/items/reorder")]
            public System.Threading.Tasks.Task ReorderListItem([Microsoft.AspNetCore.Mvc.FromBody] ReorderListItemParams body)
        {
            return this.implementation.ReorderListItemAsync(body);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.4.0 (NJsonSchema v9.13.36.0 (Newtonsoft.Json v11.0.0.0))")]
    public interface ILocationListController
    {
        /// <summary>Get a list of available location Ids by location list identifier</summary>
        /// <param name="listId">The location list identifier</param>
        /// <response code="200">A List of available location identifier for this location list</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location list not found</response>
        /// <returns>A List of available location identifier for this location list</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LocationListAvailability>> GetLocationListAvailabilityByIdAsync(int listId);
    
        /// <summary>Set availability for a location list</summary>
        /// <param name="listId">The location list identifier</param>
        /// <param name="body">The updated availability for selected location list</param>
        /// <response code="204">The availability was successfully updated</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location list not found</response>
        /// <returns>The availability was successfully updated</returns>
        System.Threading.Tasks.Task SetLocationListAvailabilityAsync(int listId, LocationListAvailabilityDetails body);
    
        /// <summary>Get availability location structure for a location list</summary>
        /// <param name="listId">The location list identifier</param>
        /// <param name="locationId">The location identifier</param>
        /// <param name="locationType">The location type will be among Group = 0, Location = 1</param>
        /// <param name="hierarchyId">The hierarchy identifier</param>
        /// <param name="levels">The number of level to traverse within hierarchy</param>
        /// <response code="200">A list of locations with statuses founded using provided criteria</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location list not found</response>
        /// <returns>A list of locations with statuses founded using provided criteria</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<Location>>> GetLocationListAvailabilityStructureAsync(int listId, int locationId, int locationType, int hierarchyId, int? levels);
    
        /// <summary>Get a list of available location Ids by location list item identifier</summary>
        /// <param name="listItemId">The location list item identifier</param>
        /// <response code="200">A List of available location identifier for this location list item</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location list item not found</response>
        /// <returns>A List of available location identifier for this location list item</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LocationListAvailability>> GetLocationListItemAvailabilityByIdAsync(int listItemId);
    
        /// <summary>Set availability for a location list item</summary>
        /// <param name="listItemId">The location list item identifier</param>
        /// <param name="body">The updated availability for selected location list item</param>
        /// <response code="204">The availability was successfully updated</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location list item not found</response>
        /// <returns>The availability was successfully updated</returns>
        System.Threading.Tasks.Task SetLocationListItemAvailabilityAsync(int listItemId, LocationListAvailabilityDetails body);
    
        /// <summary>Get availability location structure for a location list item</summary>
        /// <param name="listItemId">The location list item identifier</param>
        /// <param name="locationId">The location identifier</param>
        /// <param name="locationType">The location type will be among Group = 0, Location = 1</param>
        /// <param name="hierarchyId">The hierarchy identifier</param>
        /// <param name="levels">The number of level to traverse within hierarchy</param>
        /// <response code="200">A list of locations with statuses founded using provided criteria</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location list not found</response>
        /// <returns>A list of locations with statuses founded using provided criteria</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<Location>>> GetLocationListItemAvailabilityStructureAsync(int listItemId, int locationId, int locationType, int hierarchyId, int? levels);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.4.0 (NJsonSchema v9.13.36.0 (Newtonsoft.Json v11.0.0.0))")]
    [Microsoft.AspNetCore.Mvc.Route("api")]
    public partial class LocationListController : Microsoft.AspNetCore.Mvc.Controller
    {
        private ILocationListController implementation;
    
        public LocationListController(ILocationListController implementation)
        {
            this.implementation = implementation;
        }
    
        /// <summary>Get a list of available location Ids by location list identifier</summary>
        /// <param name="listId">The location list identifier</param>
        /// <response code="200">A List of available location identifier for this location list</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location list not found</response>
        /// <returns>A List of available location identifier for this location list</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("locationlists/{listId}")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LocationListAvailability>> GetLocationListAvailabilityById(int listId)
        {
            return this.implementation.GetLocationListAvailabilityByIdAsync(listId);
        }
    
        /// <summary>Set availability for a location list</summary>
        /// <param name="listId">The location list identifier</param>
        /// <param name="body">The updated availability for selected location list</param>
        /// <response code="204">The availability was successfully updated</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location list not found</response>
        /// <returns>The availability was successfully updated</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("locationlists/{listId}")]
            public System.Threading.Tasks.Task SetLocationListAvailability(int listId, [Microsoft.AspNetCore.Mvc.FromBody] LocationListAvailabilityDetails body)
        {
            return this.implementation.SetLocationListAvailabilityAsync(listId, body);
        }
    
        /// <summary>Get availability location structure for a location list</summary>
        /// <param name="listId">The location list identifier</param>
        /// <param name="locationId">The location identifier</param>
        /// <param name="locationType">The location type will be among Group = 0, Location = 1</param>
        /// <param name="hierarchyId">The hierarchy identifier</param>
        /// <param name="levels">The number of level to traverse within hierarchy</param>
        /// <response code="200">A list of locations with statuses founded using provided criteria</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location list not found</response>
        /// <returns>A list of locations with statuses founded using provided criteria</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("locationlists/{listId}")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<Location>>> GetLocationListAvailabilityStructure(int listId, int locationId, int locationType, int hierarchyId, int? levels)
        {
            return this.implementation.GetLocationListAvailabilityStructureAsync(listId, locationId, locationType, hierarchyId, levels);
        }
    
        /// <summary>Get a list of available location Ids by location list item identifier</summary>
        /// <param name="listItemId">The location list item identifier</param>
        /// <response code="200">A List of available location identifier for this location list item</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location list item not found</response>
        /// <returns>A List of available location identifier for this location list item</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("locationlists/items/{listItemId}")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LocationListAvailability>> GetLocationListItemAvailabilityById(int listItemId)
        {
            return this.implementation.GetLocationListItemAvailabilityByIdAsync(listItemId);
        }
    
        /// <summary>Set availability for a location list item</summary>
        /// <param name="listItemId">The location list item identifier</param>
        /// <param name="body">The updated availability for selected location list item</param>
        /// <response code="204">The availability was successfully updated</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location list item not found</response>
        /// <returns>The availability was successfully updated</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("locationlists/items/{listItemId}")]
            public System.Threading.Tasks.Task SetLocationListItemAvailability(int listItemId, [Microsoft.AspNetCore.Mvc.FromBody] LocationListAvailabilityDetails body)
        {
            return this.implementation.SetLocationListItemAvailabilityAsync(listItemId, body);
        }
    
        /// <summary>Get availability location structure for a location list item</summary>
        /// <param name="listItemId">The location list item identifier</param>
        /// <param name="locationId">The location identifier</param>
        /// <param name="locationType">The location type will be among Group = 0, Location = 1</param>
        /// <param name="hierarchyId">The hierarchy identifier</param>
        /// <param name="levels">The number of level to traverse within hierarchy</param>
        /// <response code="200">A list of locations with statuses founded using provided criteria</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Location list not found</response>
        /// <returns>A list of locations with statuses founded using provided criteria</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("locationlists/items/{listItemId}")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<Location>>> GetLocationListItemAvailabilityStructure(int listItemId, int locationId, int locationType, int hierarchyId, int? levels)
        {
            return this.implementation.GetLocationListItemAvailabilityStructureAsync(listItemId, locationId, locationType, hierarchyId, levels);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.4.0 (NJsonSchema v9.13.36.0 (Newtonsoft.Json v11.0.0.0))")]
    public interface IPersonController
    {
        /// <summary>Search for persons by params</summary>
        /// <param name="employmentStatus">Status of the person ( active = 11, inactive = 12 )</param>
        /// <param name="displayName">Display Name of the Person</param>
        /// <param name="location">Associated Location to the person</param>
        /// <param name="emailAddress">Email address of the person</param>
        /// <param name="firstName">First Name of the person</param>
        /// <param name="lastName">Last Name of the person</param>
        /// <param name="countryDivision">State or Province of the person</param>
        /// <param name="country">Country of the person</param>
        /// <param name="relationshipToCompany">Relationship Type</param>
        /// <param name="contractingCompany">Contracting company of the person</param>
        /// <param name="customerName">Customer's Name of the Person</param>
        /// <param name="supervisor">Supervisor of the Person</param>
        /// <param name="startDateStart">Start date of range for Hire Date of the Person</param>
        /// <param name="startDateEnd">End date of range for Hire Date of the Person</param>
        /// <param name="endDateStart">Start date of range for End Date of the Person</param>
        /// <param name="endDateEnd">End date of range for End Date of the Person</param>
        /// <param name="currentPositionStartDateStart">Start date of range for Current Position Start Date of the Person</param>
        /// <param name="currentPositionStartDateEnd">End date of range for Current Position Start Date of the Person</param>
        /// <param name="employeeID">EmployeeID</param>
        /// <param name="currentPosition">Current Position of the Person</param>
        /// <param name="loginAccessRequired">Person requires login access or not</param>
        /// <param name="username">Username of the person</param>
        /// <param name="loginExpirationDateStart">Start date of range for Expiry Date of the Person</param>
        /// <param name="loginExpirationDateEnd">End date of range for Expiry Date of the Person</param>
        /// <param name="contactPreference">Contact Type of the person email/phone</param>
        /// <param name="pageNumber">Page Number of the Person</param>
        /// <param name="pageSize">Page Size of the Person</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <response code="200">A list of persons founded using provided criteria</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Persons not found</response>
        /// <returns>A list of persons founded using provided criteria</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<Person>>> GetPersonsAsync(System.Collections.Generic.IEnumerable<int> employmentStatus, string displayName, System.Collections.Generic.IEnumerable<int> location, string emailAddress, string firstName, string lastName, System.Collections.Generic.IEnumerable<int> countryDivision, System.Collections.Generic.IEnumerable<int> country, System.Collections.Generic.IEnumerable<int> relationshipToCompany, System.Collections.Generic.IEnumerable<int> contractingCompany, System.Collections.Generic.IEnumerable<int> customerName, System.Collections.Generic.IEnumerable<int> supervisor, System.DateTimeOffset? startDateStart, System.DateTimeOffset? startDateEnd, System.DateTimeOffset? endDateStart, System.DateTimeOffset? endDateEnd, System.DateTimeOffset? currentPositionStartDateStart, System.DateTimeOffset? currentPositionStartDateEnd, string employeeID, string currentPosition, bool? loginAccessRequired, string username, System.DateTimeOffset? loginExpirationDateStart, System.DateTimeOffset? loginExpirationDateEnd, System.Collections.Generic.IEnumerable<int> contactPreference, int? pageNumber, int? pageSize, string sortBy, string sortOrder);
    
        /// <summary>Updates a person based on person id</summary>
        /// <response code="204">The person was successfully updated</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Persons not found</response>
        /// <returns>The person was successfully updated</returns>
        System.Threading.Tasks.Task UpdatePersonAsync(Person body);
    
        /// <summary>Creates a new person and returns the person id</summary>
        /// <response code="201">The new person identifier</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Person not found</response>
        /// <returns>The new person identifier</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreatePersonAsync(Person body);
    
        /// <summary>Delete a person by person id</summary>
        /// <param name="personId">The person identifier</param>
        /// <response code="204">Person has been deleted</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Person not found</response>
        /// <returns>Person has been deleted</returns>
        System.Threading.Tasks.Task DeletePersonAsync(int personId);
    
        /// <summary>Returns the person based on person id</summary>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Person not found</response>
        /// <returns>OK</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Person>> GetPersonByIdAsync(int personId);
    
        /// <summary>Returns persons based on name</summary>
        /// <param name="pageNumber">Page Number of the Person</param>
        /// <param name="pageSize">Page Size of the Person</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Persons not found</response>
        /// <returns>OK</returns>
        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<Person>>> GetPersonsByNameAsync(string name, int? pageNumber, int? pageSize);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.4.0 (NJsonSchema v9.13.36.0 (Newtonsoft.Json v11.0.0.0))")]
    [Microsoft.AspNetCore.Mvc.Route("api")]
    public partial class PersonController : Microsoft.AspNetCore.Mvc.Controller
    {
        private IPersonController implementation;
    
        public PersonController(IPersonController implementation)
        {
            this.implementation = implementation;
        }
    
        /// <summary>Search for persons by params</summary>
        /// <param name="employmentStatus">Status of the person ( active = 11, inactive = 12 )</param>
        /// <param name="displayName">Display Name of the Person</param>
        /// <param name="location">Associated Location to the person</param>
        /// <param name="emailAddress">Email address of the person</param>
        /// <param name="firstName">First Name of the person</param>
        /// <param name="lastName">Last Name of the person</param>
        /// <param name="countryDivision">State or Province of the person</param>
        /// <param name="country">Country of the person</param>
        /// <param name="relationshipToCompany">Relationship Type</param>
        /// <param name="contractingCompany">Contracting company of the person</param>
        /// <param name="customerName">Customer's Name of the Person</param>
        /// <param name="supervisor">Supervisor of the Person</param>
        /// <param name="startDateStart">Start date of range for Hire Date of the Person</param>
        /// <param name="startDateEnd">End date of range for Hire Date of the Person</param>
        /// <param name="endDateStart">Start date of range for End Date of the Person</param>
        /// <param name="endDateEnd">End date of range for End Date of the Person</param>
        /// <param name="currentPositionStartDateStart">Start date of range for Current Position Start Date of the Person</param>
        /// <param name="currentPositionStartDateEnd">End date of range for Current Position Start Date of the Person</param>
        /// <param name="employeeID">EmployeeID</param>
        /// <param name="currentPosition">Current Position of the Person</param>
        /// <param name="loginAccessRequired">Person requires login access or not</param>
        /// <param name="username">Username of the person</param>
        /// <param name="loginExpirationDateStart">Start date of range for Expiry Date of the Person</param>
        /// <param name="loginExpirationDateEnd">End date of range for Expiry Date of the Person</param>
        /// <param name="contactPreference">Contact Type of the person email/phone</param>
        /// <param name="pageNumber">Page Number of the Person</param>
        /// <param name="pageSize">Page Size of the Person</param>
        /// <param name="sortBy">Param for sortBy</param>
        /// <param name="sortOrder">Param for sortOrder</param>
        /// <response code="200">A list of persons founded using provided criteria</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Persons not found</response>
        /// <returns>A list of persons founded using provided criteria</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("persons")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<Person>>> GetPersons(System.Collections.Generic.IEnumerable<int> employmentStatus, string displayName, System.Collections.Generic.IEnumerable<int> location, string emailAddress, string firstName, string lastName, System.Collections.Generic.IEnumerable<int> countryDivision, System.Collections.Generic.IEnumerable<int> country, System.Collections.Generic.IEnumerable<int> relationshipToCompany, System.Collections.Generic.IEnumerable<int> contractingCompany, System.Collections.Generic.IEnumerable<int> customerName, System.Collections.Generic.IEnumerable<int> supervisor, System.DateTimeOffset? startDateStart, System.DateTimeOffset? startDateEnd, System.DateTimeOffset? endDateStart, System.DateTimeOffset? endDateEnd, System.DateTimeOffset? currentPositionStartDateStart, System.DateTimeOffset? currentPositionStartDateEnd, string employeeID, string currentPosition, bool? loginAccessRequired, string username, System.DateTimeOffset? loginExpirationDateStart, System.DateTimeOffset? loginExpirationDateEnd, System.Collections.Generic.IEnumerable<int> contactPreference, int? pageNumber, int? pageSize, string sortBy, string sortOrder)
        {
            return this.implementation.GetPersonsAsync(employmentStatus, displayName, location, emailAddress, firstName, lastName, countryDivision, country, relationshipToCompany, contractingCompany, customerName, supervisor, startDateStart, startDateEnd, endDateStart, endDateEnd, currentPositionStartDateStart, currentPositionStartDateEnd, employeeID, currentPosition, loginAccessRequired, username, loginExpirationDateStart, loginExpirationDateEnd, contactPreference, pageNumber, pageSize, sortBy, sortOrder);
        }
    
        /// <summary>Updates a person based on person id</summary>
        /// <response code="204">The person was successfully updated</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Persons not found</response>
        /// <returns>The person was successfully updated</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("persons")]
            public System.Threading.Tasks.Task UpdatePerson([Microsoft.AspNetCore.Mvc.FromBody] Person body)
        {
            return this.implementation.UpdatePersonAsync(body);
        }
    
        /// <summary>Creates a new person and returns the person id</summary>
        /// <response code="201">The new person identifier</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Person not found</response>
        /// <returns>The new person identifier</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("persons")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Status201Response>> CreatePerson([Microsoft.AspNetCore.Mvc.FromBody] Person body)
        {
            return this.implementation.CreatePersonAsync(body);
        }
    
        /// <summary>Delete a person by person id</summary>
        /// <param name="personId">The person identifier</param>
        /// <response code="204">Person has been deleted</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Person not found</response>
        /// <returns>Person has been deleted</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("persons")]
            public System.Threading.Tasks.Task DeletePerson(int personId)
        {
            return this.implementation.DeletePersonAsync(personId);
        }
    
        /// <summary>Returns the person based on person id</summary>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Person not found</response>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("persons/{personId}")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Person>> GetPersonById(int personId)
        {
            return this.implementation.GetPersonByIdAsync(personId);
        }
    
        /// <summary>Returns persons based on name</summary>
        /// <param name="pageNumber">Page Number of the Person</param>
        /// <param name="pageSize">Page Size of the Person</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="403">You do not have sufficient rights to this resource</response>
        /// <response code="404">Persons not found</response>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("persons/search/{name}")]
            public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<Person>>> GetPersonsByName(string name, int? pageNumber, int? pageSize)
        {
            return this.implementation.GetPersonsByNameAsync(name, pageNumber, pageSize);
        }
    
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BadRequestError 
    {
        /// <summary>The error code if existed</summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Always)]
        public int ErrorCode { get; set; }
    
        /// <summary>The error messages</summary>
        [Newtonsoft.Json.JsonProperty("errorMessages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IList<string> ErrorMessages { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BadRequestError FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BadRequestError>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Status201Response 
    {
        /// <summary>The new object identifier</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Status201Response FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Status201Response>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Status201MultipleResponses 
    {
        /// <summary>The new object identifiers</summary>
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IList<int> Ids { get; set; } = new System.Collections.Generic.List<int>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Status201MultipleResponses FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Status201MultipleResponses>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Hierarchy 
    {
        /// <summary>The Hierarchy name</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Idendifying hierarchy as Default or not</summary>
        [Newtonsoft.Json.JsonProperty("IsDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDefault { get; set; }
    
        /// <summary>The hierarchy identifier</summary>
        [Newtonsoft.Json.JsonProperty("HierarchyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HierarchyId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Hierarchy FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Hierarchy>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NewHierarchyParams 
    {
        /// <summary>The Hierarchy name</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        /// <summary>Idendifying hierarchy as Default or not</summary>
        [Newtonsoft.Json.JsonProperty("IsDefault", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDefault { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static NewHierarchyParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewHierarchyParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateHierarchyParams 
    {
        /// <summary>The Hierarchy name</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Idendifying hierarchy as Default or not</summary>
        [Newtonsoft.Json.JsonProperty("IsDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefault { get; set; }
    
        /// <summary>The hierarchy identifier</summary>
        [Newtonsoft.Json.JsonProperty("HierarchyId", Required = Newtonsoft.Json.Required.Always)]
        public int HierarchyId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UpdateHierarchyParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateHierarchyParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Location 
    {
        /// <summary>The location identifier</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>The location name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The location type will be among Group = 0, Location = 1</summary>
        [Newtonsoft.Json.JsonProperty("locationType", Required = Newtonsoft.Json.Required.Always)]
        public int LocationType { get; set; }
    
        /// <summary>The location status will be among Active = 0, Inactive = 1, Archived = 2</summary>
        [Newtonsoft.Json.JsonProperty("locationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LocationStatus { get; set; }
    
        /// <summary>The location parent identifiers</summary>
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentId { get; set; }
    
        /// <summary>The hierarchy identifier</summary>
        [Newtonsoft.Json.JsonProperty("hierarchyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HierarchyId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Location FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Location>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MovingLocationParams 
    {
        /// <summary>The location identifier</summary>
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Always)]
        public int LocationId { get; set; }
    
        /// <summary>The location type</summary>
        [Newtonsoft.Json.JsonProperty("locationType", Required = Newtonsoft.Json.Required.Always)]
        public int LocationType { get; set; }
    
        /// <summary>The location parent identifier</summary>
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Always)]
        public int ParentId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static MovingLocationParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MovingLocationParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NewLocationParams 
    {
        /// <summary>The location name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        /// <summary>The location type will be among Group = 0, Location = 1</summary>
        [Newtonsoft.Json.JsonProperty("locationType", Required = Newtonsoft.Json.Required.Always)]
        public int LocationType { get; set; }
    
        /// <summary>The location status will be among Active = 0, Inactive = 1, Archived = 2</summary>
        [Newtonsoft.Json.JsonProperty("locationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LocationStatus { get; set; }
    
        /// <summary>The array of location parent identifiers</summary>
        [Newtonsoft.Json.JsonProperty("parentIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IList<int> ParentIds { get; set; }
    
        /// <summary>The hierarchy identifier</summary>
        [Newtonsoft.Json.JsonProperty("hierarchyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HierarchyId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static NewLocationParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewLocationParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ListItem 
    {
        [Newtonsoft.Json.JsonProperty("listitemid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Listitemid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("listid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Listid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("editable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Editable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemorder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Itemorder { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Statusid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ListItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItem>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NewListItemParams 
    {
        [Newtonsoft.Json.JsonProperty("listid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Listid { get; set; }
    
        /// <summary>The array of list item values</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IList<string> Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static NewListItemParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewListItemParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateListItemParams 
    {
        [Newtonsoft.Json.JsonProperty("listitemid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Listitemid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("editable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Editable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Statusid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UpdateListItemParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateListItemParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReorderListItemParams 
    {
        [Newtonsoft.Json.JsonProperty("listid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Listid { get; set; }
    
        /// <summary>The array of list item values</summary>
        [Newtonsoft.Json.JsonProperty("listitems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IList<ListItem> Listitems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ReorderListItemParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReorderListItemParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class List 
    {
        [Newtonsoft.Json.JsonProperty("listid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Listid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("orderable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Orderable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("editable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Editable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Statusid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemsorderable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Itemsorderable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemseditable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Itemseditable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static List FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<List>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LocationListAvailability 
    {
        /// <summary>The array of location identifiers</summary>
        [Newtonsoft.Json.JsonProperty("LocationIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IList<int> LocationIds { get; set; }
    
        /// <summary>The array of location group identifiers</summary>
        [Newtonsoft.Json.JsonProperty("LocationGroupIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IList<int> LocationGroupIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static LocationListAvailability FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LocationListAvailability>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LocationListAvailabilityDetails 
    {
        /// <summary>The array statuses for locations</summary>
        [Newtonsoft.Json.JsonProperty("LocationStatuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, bool> LocationStatuses { get; set; }
    
        /// <summary>The array statuses for location groups</summary>
        [Newtonsoft.Json.JsonProperty("LocationGroupStatuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, bool> LocationGroupStatuses { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static LocationListAvailabilityDetails FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LocationListAvailabilityDetails>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.36.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Person 
    {
        [Newtonsoft.Json.JsonProperty("personId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PersonId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdByPersonId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CreatedByPersonId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("loginAccessRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LoginAccessRequired { get; set; }
    
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StatusId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("locationList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IList<int> LocationList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("genderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GenderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateOfBirth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mobileNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MobileNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryDivisionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CountryDivisionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CountryId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("relationshipId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RelationshipId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("currentPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("supervisorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SupervisorId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hireDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? HireDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("currentpositionStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CurrentpositionStartDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("employeeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmployeeId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contractingCompanyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContractingCompanyId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Customerid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContactTypeId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("locked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Locked { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpiryDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("personDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonDetails { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Person FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Person>(data);
        }
    
    }

    #pragma warning restore
}